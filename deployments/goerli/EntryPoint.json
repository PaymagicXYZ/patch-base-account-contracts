{
  "address": "0xe795dF6aF1AC8E2019d8b628B0517D5b8C6451D3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "preOpGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "validAfter",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "validBefore",
          "type": "uint64"
        }
      ],
      "name": "ExecutionResult",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "opIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "FailedOp",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderAddressResult",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "SignatureValidationFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "preOpGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prefund",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sigFailed",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "validAfter",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "validUntil",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "paymasterContext",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEntryPoint.ReturnInfo",
          "name": "returnInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "senderInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "factoryInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "paymasterInfo",
          "type": "tuple"
        }
      ],
      "name": "ValidationResult",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "preOpGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prefund",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sigFailed",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "validAfter",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "validUntil",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "paymasterContext",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEntryPoint.ReturnInfo",
          "name": "returnInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "senderInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "factoryInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "paymasterInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "actualAggregator",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "stake",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "unstakeDelaySec",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IStakeManager.StakeInfo",
              "name": "stakeInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct IEntryPoint.AggregatorStakeInfo",
          "name": "aggregatorInfo",
          "type": "tuple"
        }
      ],
      "name": "ValidationResultWithAggregation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        }
      ],
      "name": "AccountDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDeposit",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "SignatureAggregatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTime",
          "type": "uint256"
        }
      ],
      "name": "StakeLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTime",
          "type": "uint256"
        }
      ],
      "name": "StakeUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualGasUsed",
          "type": "uint256"
        }
      ],
      "name": "UserOperationEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "revertReason",
          "type": "bytes"
        }
      ],
      "name": "UserOperationRevertReason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SIG_VALIDATION_FAILED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_unstakeDelaySec",
          "type": "uint32"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "deposit",
          "type": "uint112"
        },
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint112",
          "name": "stake",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "withdrawTime",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDepositInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "deposit",
              "type": "uint112"
            },
            {
              "internalType": "bool",
              "name": "staked",
              "type": "bool"
            },
            {
              "internalType": "uint112",
              "name": "stake",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "unstakeDelaySec",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "withdrawTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStakeManager.DepositInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initCode",
          "type": "bytes"
        }
      ],
      "name": "getSenderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "getUserOpHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "initCode",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterAndData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct UserOperation[]",
              "name": "userOps",
              "type": "tuple[]"
            },
            {
              "internalType": "contract IAggregator",
              "name": "aggregator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEntryPoint.UserOpsPerAggregator[]",
          "name": "opsPerAggregator",
          "type": "tuple[]"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "handleAggregatedOps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation[]",
          "name": "ops",
          "type": "tuple[]"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "handleOps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymaster",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                }
              ],
              "internalType": "struct EntryPoint.MemoryUserOp",
              "name": "mUserOp",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "userOpHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "prefund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contextOffset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preOpGas",
              "type": "uint256"
            }
          ],
          "internalType": "struct EntryPoint.UserOpInfo",
          "name": "opInfo",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        }
      ],
      "name": "innerHandleOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "op",
          "type": "tuple"
        }
      ],
      "name": "simulateHandleOp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "simulateValidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f301d71984b1b4b1d8516805ec4ad231",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"validAfter\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validBefore\",\"type\":\"uint64\"}],\"name\":\"ExecutionResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAddressResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureValidationFailed\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"validAfter\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResult\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"validAfter\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"actualAggregator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IEntryPoint.AggregatorStakeInfo\",\"name\":\"aggregatorInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResultWithAggregation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"}],\"name\":\"AccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasUsed\",\"type\":\"uint256\"}],\"name\":\"UserOperationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"UserOperationRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SIG_VALIDATION_FAILED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"withdrawTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"withdrawTime\",\"type\":\"uint64\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getSenderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.UserOpsPerAggregator[]\",\"name\":\"opsPerAggregator\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleAggregatedOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPoint.MemoryUserOp\",\"name\":\"mUserOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPoint.UserOpInfo\",\"name\":\"opInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"innerHandleOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"op\",\"type\":\"tuple\"}],\"name\":\"simulateHandleOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"simulateValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"FailedOp(uint256,address,string)\":[{\"params\":{\"opIndex\":\"- index into the array of ops to the failed one (in simulateValidation, this is always zero)\",\"paymaster\":\"- if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,       this value will be zero (since it failed before accessing the paymaster)\",\"reason\":\"- revert reason   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of account/paymaster reverts.\"}}],\"ValidationResult((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"params\":{\"factoryInfo\":\"stake information about the factor (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"params\":{\"aggregatorInfo\":\"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation\",\"factoryInfo\":\"stake information about the factor (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}]},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"getSenderAddress(bytes)\":{\"params\":{\"initCode\":\"the constructor code to be passed into the UserOperation.\"}},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"opsPerAggregator\":\"the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\"}},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"ops\":\"the operations to execute\"}},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"details\":\"this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\",\"params\":{\"userOp\":\"the user operation to validate.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"FailedOp(uint256,address,string)\":[{\"notice\":\"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\"}],\"SenderAddressResult(address)\":[{\"notice\":\"return value of getSenderAddress\"}],\"SignatureValidationFailed(address)\":[{\"notice\":\"error case when a signature aggregator fails to verify the aggregated signature it had created.\"}],\"ValidationResult((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"notice\":\"Successful result from simulateValidation.\"}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"notice\":\"Successful result from simulateValidation, if the account returns a signature aggregator\"}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"notice\":\"account \\\"sender\\\" was deployed.\"},\"SignatureAggregatorChanged(address)\":{\"notice\":\"signature aggregator used by the following UserOperationEvents within this bundle.\"},\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\"}},\"kind\":\"user\",\"methods\":{\"SIG_VALIDATION_FAILED()\":{\"notice\":\"for simulation purposes, validateUserOp (and validatePaymasterUserOp) must return this value in case of signature failure, instead of revert.\"},\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"balanceOf(address)\":{\"notice\":\"return the deposit (for gas payment) of the account\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"deposits(address)\":{\"notice\":\"maps paymaster to their deposits and stakes\"},\"getSenderAddress(bytes)\":{\"notice\":\"Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error\"},\"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\"},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation with Aggregators\"},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an \\\"actualAggregator\\\" when performing simulateValidation), then handleAggregatedOps() must be used instead.\"},\"innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)\":{\"notice\":\"inner function to handle a UserOperation. Must be declared \\\"external\\\" to open a call context, but it can only be called by handleOps.\"},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \\\"ExecutionResult\\\". it performs full validation of the UserOperation, but ignores signature error. Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events.\"},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/EntryPoint.sol\":\"EntryPoint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"contracts/core/EntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IPaymaster.sol\\\";\\n\\nimport \\\"../interfaces/IAggregatedAccount.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./StakeManager.sol\\\";\\nimport \\\"./SenderCreator.sol\\\";\\n\\ncontract EntryPoint is IEntryPoint, StakeManager {\\n\\n    using UserOperationLib for UserOperation;\\n\\n    SenderCreator private immutable senderCreator = new SenderCreator();\\n\\n    // internal value used during simulation: need to query aggregator.\\n    address private constant SIMULATE_FIND_AGGREGATOR = address(1);\\n\\n    // marker for inner call revert on out of gas\\n    bytes32 private constant INNER_OUT_OF_GAS = hex'deaddead';\\n\\n    /**\\n     * for simulation purposes, validateUserOp (and validatePaymasterUserOp) must return this value\\n     * in case of signature failure, instead of revert.\\n     */\\n    uint256 public constant SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * compensate the caller's beneficiary address with the collected fees of all UserOperations.\\n     * @param beneficiary the address to receive the fees\\n     * @param amount amount to transfer.\\n     */\\n    function _compensate(address payable beneficiary, uint256 amount) internal {\\n        require(beneficiary != address(0), \\\"AA90 invalid beneficiary\\\");\\n        (bool success,) = beneficiary.call{value : amount}(\\\"\\\");\\n        require(success, \\\"AA91 failed send to beneficiary\\\");\\n    }\\n\\n    /**\\n     * execute a user op\\n     * @param opIndex into into the opInfo array\\n     * @param userOp the userOp to execute\\n     * @param opInfo the opInfo filled by validatePrepayment for this userOp.\\n     * @return collected the total amount this userOp paid.\\n     */\\n    function _executeUserOp(uint256 opIndex, UserOperation calldata userOp, UserOpInfo memory opInfo) private returns (uint256 collected) {\\n        uint256 preGas = gasleft();\\n        bytes memory context = getMemoryBytesFromOffset(opInfo.contextOffset);\\n\\n        try this.innerHandleOp(userOp.callData, opInfo, context) returns (uint256 _actualGasCost) {\\n            collected = _actualGasCost;\\n        } catch {\\n            bytes32 innerRevertCode;\\n            assembly {\\n                returndatacopy(0, 0, 32)\\n                innerRevertCode := mload(0)\\n            }\\n            // handleOps was called with gas limit too low. abort entire bundle.\\n            if(innerRevertCode == INNER_OUT_OF_GAS) {\\n                //report paymaster, since if it is deliberately caused by the bundler,\\n                // it must be a revert caused by paymaster.\\n                revert FailedOp(opIndex, opInfo.mUserOp.paymaster, \\\"AA95 out of gas\\\");\\n            }\\n\\n            uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\\n            collected = _handlePostOp(opIndex, IPaymaster.PostOpMode.postOpReverted, opInfo, context, actualGas);\\n        }\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an \\\"actualAggregator\\\" when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) public {\\n\\n        uint256 opslen = ops.length;\\n        UserOpInfo[] memory opInfos = new UserOpInfo[](opslen);\\n\\n    unchecked {\\n        for (uint256 i = 0; i < opslen; i++) {\\n            UserOpInfo memory opInfo = opInfos[i];\\n            (uint256 sigTimeRange, uint256 paymasterTimeRange,) = _validatePrepayment(i, ops[i], opInfo, address(0));\\n            _validateSigTimeRange(i, opInfo, sigTimeRange, paymasterTimeRange);\\n        }\\n\\n        uint256 collected = 0;\\n\\n        for (uint256 i = 0; i < opslen; i++) {\\n            collected += _executeUserOp(i, ops[i], opInfos[i]);\\n        }\\n\\n        _compensate(beneficiary, collected);\\n    } //unchecked\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) public {\\n\\n        uint256 opasLen = opsPerAggregator.length;\\n        uint256 totalOps = 0;\\n        for (uint256 i = 0; i < opasLen; i++) {\\n            totalOps += opsPerAggregator[i].userOps.length;\\n        }\\n\\n        UserOpInfo[] memory opInfos = new UserOpInfo[](totalOps);\\n\\n        uint256 opIndex = 0;\\n        for (uint256 a = 0; a < opasLen; a++) {\\n            UserOpsPerAggregator calldata opa = opsPerAggregator[a];\\n            UserOperation[] calldata ops = opa.userOps;\\n            IAggregator aggregator = opa.aggregator;\\n            uint256 opslen = ops.length;\\n            for (uint256 i = 0; i < opslen; i++) {\\n                UserOpInfo memory opInfo = opInfos[opIndex];\\n                (uint256 sigTimeRange, uint256 paymasterTimeRange,) = _validatePrepayment(opIndex, ops[i], opInfo, address(aggregator));\\n                _validateSigTimeRange(i, opInfo, sigTimeRange, paymasterTimeRange);\\n                opIndex++;\\n            }\\n\\n            if (address(aggregator) != address(0)) {\\n                // solhint-disable-next-line no-empty-blocks\\n                try aggregator.validateSignatures(ops, opa.signature) {}\\n                catch {\\n                    revert SignatureValidationFailed(address(aggregator));\\n                }\\n            }\\n        }\\n\\n        uint256 collected = 0;\\n        opIndex = 0;\\n        for (uint256 a = 0; a < opasLen; a++) {\\n            UserOpsPerAggregator calldata opa = opsPerAggregator[a];\\n            emit SignatureAggregatorChanged(address(opa.aggregator));\\n            UserOperation[] calldata ops = opa.userOps;\\n            uint256 opslen = ops.length;\\n\\n            for (uint256 i = 0; i < opslen; i++) {\\n                collected += _executeUserOp(opIndex, ops[i], opInfos[opIndex]);\\n                opIndex++;\\n            }\\n        }\\n        emit SignatureAggregatorChanged(address(0));\\n\\n        _compensate(beneficiary, collected);\\n    }\\n\\n    function simulateHandleOp(UserOperation calldata op) external override {\\n\\n        UserOpInfo memory opInfo;\\n\\n        (uint256 sigTimeRange, uint256 paymasterTimeRange,) = _validatePrepayment(0, op, opInfo, SIMULATE_FIND_AGGREGATOR);\\n        (,uint64 validAfter, uint64 validUntil) = _intersectTimeRange(sigTimeRange, paymasterTimeRange);\\n\\n        numberMarker();\\n        uint256 paid = _executeUserOp(0, op, opInfo);\\n        revert ExecutionResult(opInfo.preOpGas, paid, validAfter, validUntil);\\n    }\\n\\n\\n    //a memory copy of UserOp fields (except that dynamic byte arrays: callData, initCode and signature\\n    struct MemoryUserOp {\\n        address sender;\\n        uint256 nonce;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        address paymaster;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n    }\\n\\n    struct UserOpInfo {\\n        MemoryUserOp mUserOp;\\n        bytes32 userOpHash;\\n        uint256 prefund;\\n        uint256 contextOffset;\\n        uint256 preOpGas;\\n    }\\n\\n    /**\\n     * inner function to handle a UserOperation.\\n     * Must be declared \\\"external\\\" to open a call context, but it can only be called by handleOps.\\n     */\\n    function innerHandleOp(bytes calldata callData, UserOpInfo memory opInfo, bytes calldata context) external returns (uint256 actualGasCost) {\\n        uint256 preGas = gasleft();\\n        require(msg.sender == address(this), \\\"AA92 internal call only\\\");\\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n\\n        uint callGasLimit = mUserOp.callGasLimit;\\n    unchecked {\\n        // handleOps was called with gas limit too low. abort entire bundle.\\n        if (gasleft() < callGasLimit + mUserOp.verificationGasLimit + 5000) {\\n            assembly {\\n                mstore(0, INNER_OUT_OF_GAS)\\n                revert(0, 32)\\n            }\\n        }\\n    }\\n\\n        IPaymaster.PostOpMode mode = IPaymaster.PostOpMode.opSucceeded;\\n        if (callData.length > 0) {\\n\\n            (bool success,bytes memory result) = address(mUserOp.sender).call{gas : callGasLimit}(callData);\\n            if (!success) {\\n                if (result.length > 0) {\\n                    emit UserOperationRevertReason(opInfo.userOpHash, mUserOp.sender, mUserOp.nonce, result);\\n                }\\n                mode = IPaymaster.PostOpMode.opReverted;\\n            }\\n        }\\n\\n    unchecked {\\n        uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\\n        //note: opIndex is ignored (relevant only if mode==postOpReverted, which is only possible outside of innerHandleOp)\\n        return _handlePostOp(0, mode, opInfo, context, actualGas);\\n    }\\n    }\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) public view returns (bytes32) {\\n        return keccak256(abi.encode(userOp.hash(), address(this), block.chainid));\\n    }\\n\\n    /**\\n     * copy general fields from userOp into the memory opInfo structure.\\n     */\\n    function _copyUserOpToMemory(UserOperation calldata userOp, MemoryUserOp memory mUserOp) internal pure {\\n        mUserOp.sender = userOp.sender;\\n        mUserOp.nonce = userOp.nonce;\\n        mUserOp.callGasLimit = userOp.callGasLimit;\\n        mUserOp.verificationGasLimit = userOp.verificationGasLimit;\\n        mUserOp.preVerificationGas = userOp.preVerificationGas;\\n        mUserOp.maxFeePerGas = userOp.maxFeePerGas;\\n        mUserOp.maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes calldata paymasterAndData = userOp.paymasterAndData;\\n        if (paymasterAndData.length > 0) {\\n            require(paymasterAndData.length >= 20, \\\"AA93 invalid paymasterAndData\\\");\\n            mUserOp.paymaster = address(bytes20(paymasterAndData[: 20]));\\n        } else {\\n            mUserOp.paymaster = address(0);\\n        }\\n    }\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external {\\n        UserOpInfo memory outOpInfo;\\n\\n        (uint256 sigTimeRange, uint256 paymasterTimeRange, address aggregator) = _validatePrepayment(0, userOp, outOpInfo, SIMULATE_FIND_AGGREGATOR);\\n        StakeInfo memory paymasterInfo = getStakeInfo(outOpInfo.mUserOp.paymaster);\\n        StakeInfo memory senderInfo = getStakeInfo(outOpInfo.mUserOp.sender);\\n        StakeInfo memory factoryInfo;\\n        {\\n            bytes calldata initCode = userOp.initCode;\\n            address factory = initCode.length >= 20 ? address(bytes20(initCode[0 : 20])) : address(0);\\n            factoryInfo = getStakeInfo(factory);\\n        }\\n\\n        (bool sigFailed, uint64 validAfter, uint64 validUntil) = _intersectTimeRange(sigTimeRange, paymasterTimeRange);\\n        ReturnInfo memory returnInfo = ReturnInfo(outOpInfo.preOpGas, outOpInfo.prefund,\\n            sigFailed, validAfter, validUntil, getMemoryBytesFromOffset(outOpInfo.contextOffset));\\n\\n        if (aggregator != address(0)) {\\n            AggregatorStakeInfo memory aggregatorInfo = AggregatorStakeInfo(aggregator, getStakeInfo(aggregator));\\n            revert ValidationResultWithAggregation(returnInfo, senderInfo, factoryInfo, paymasterInfo, aggregatorInfo);\\n        }\\n        revert ValidationResult(returnInfo, senderInfo, factoryInfo, paymasterInfo);\\n\\n    }\\n\\n    function _getRequiredPrefund(MemoryUserOp memory mUserOp) internal view returns (uint256 requiredPrefund) {\\n    unchecked {\\n        //when using a Paymaster, the verificationGasLimit is used also to as a limit for the postOp call.\\n        // our security model might call postOp eventually twice\\n        uint256 mul = mUserOp.paymaster != address(0) ? 3 : 1;\\n        uint256 requiredGas = mUserOp.callGasLimit + mUserOp.verificationGasLimit * mul + mUserOp.preVerificationGas;\\n\\n        // TODO: copy logic of gasPrice?\\n        requiredPrefund = requiredGas * getUserOpGasPrice(mUserOp);\\n    }\\n    }\\n\\n    // create the sender's contract if needed.\\n    function _createSenderIfNeeded(uint256 opIndex, UserOpInfo memory opInfo, bytes calldata initCode) internal {\\n        if (initCode.length != 0) {\\n            address sender = opInfo.mUserOp.sender;\\n            if (sender.code.length != 0) revert FailedOp(opIndex, address(0), \\\"AA10 sender already constructed\\\");\\n            address sender1 = senderCreator.createSender{gas : opInfo.mUserOp.verificationGasLimit}(initCode);\\n            if (sender1 == address(0)) revert FailedOp(opIndex, address(0), \\\"AA13 initCode failed or OOG\\\");\\n            if (sender1 != sender) revert FailedOp(opIndex, address(0), \\\"AA14 initCode must return sender\\\");\\n            if (sender1.code.length == 0) revert FailedOp(opIndex, address(0), \\\"AA15 initCode must create sender\\\");\\n            address factory = address(bytes20(initCode[0 : 20]));\\n            emit AccountDeployed(opInfo.userOpHash, sender, factory, opInfo.mUserOp.paymaster);\\n        }\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes calldata initCode) public {\\n        revert SenderAddressResult(senderCreator.createSender(initCode));\\n    }\\n\\n    /**\\n     * call account.validateUserOp.\\n     * revert (with FailedOp) in case validateUserOp reverts, or account didn't send required prefund.\\n     * decrement account's deposit if needed\\n     */\\n    function _validateAccountPrepayment(uint256 opIndex, UserOperation calldata op, UserOpInfo memory opInfo, address aggregator, uint256 requiredPrefund)\\n    internal returns (uint256 gasUsedByValidateAccountPrepayment, address actualAggregator, uint256 sigTimeRange) {\\n    unchecked {\\n        uint256 preGas = gasleft();\\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n        address sender = mUserOp.sender;\\n        _createSenderIfNeeded(opIndex, opInfo, op.initCode);\\n        if (aggregator == SIMULATE_FIND_AGGREGATOR) {\\n            numberMarker();\\n\\n            if (sender.code.length == 0) {\\n                // it would revert anyway. but give a meaningful message\\n                revert FailedOp(0, address(0), \\\"AA20 account not deployed\\\");\\n            }\\n            if (mUserOp.paymaster != address(0) && mUserOp.paymaster.code.length == 0) {\\n                // it would revert anyway. but give a meaningful message\\n                revert FailedOp(0, address(0), \\\"AA30 paymaster not deployed\\\");\\n            }\\n            // during simulation, we don't use given aggregator,\\n            // but query the account for its aggregator\\n            try IAggregatedAccount(sender).getAggregator() returns (address userOpAggregator) {\\n                aggregator = actualAggregator = userOpAggregator;\\n            } catch {\\n                aggregator = actualAggregator = address(0);\\n            }\\n        }\\n        uint256 missingAccountFunds = 0;\\n        address paymaster = mUserOp.paymaster;\\n        if (paymaster == address(0)) {\\n            uint256 bal = balanceOf(sender);\\n            missingAccountFunds = bal > requiredPrefund ? 0 : requiredPrefund - bal;\\n        }\\n        try IAccount(sender).validateUserOp{gas : mUserOp.verificationGasLimit}(op, opInfo.userOpHash, aggregator, missingAccountFunds)\\n        returns (uint256 _sigTimeRange) {\\n            sigTimeRange = _sigTimeRange;\\n        } catch Error(string memory revertReason) {\\n            revert FailedOp(opIndex, address(0), revertReason);\\n        } catch {\\n            revert FailedOp(opIndex, address(0), \\\"AA23 reverted (or OOG)\\\");\\n        }\\n        if (paymaster == address(0)) {\\n            DepositInfo storage senderInfo = deposits[sender];\\n            uint256 deposit = senderInfo.deposit;\\n            if (requiredPrefund > deposit) {\\n                revert FailedOp(opIndex, address(0), \\\"AA21 didn't pay prefund\\\");\\n            }\\n            senderInfo.deposit = uint112(deposit - requiredPrefund);\\n        }\\n        gasUsedByValidateAccountPrepayment = preGas - gasleft();\\n    }\\n    }\\n\\n    /**\\n     * in case the request has a paymaster:\\n     * validate paymaster is staked and has enough deposit.\\n     * call paymaster.validatePaymasterUserOp.\\n     * revert with proper FailedOp in case paymaster reverts.\\n     * decrement paymaster's deposit\\n     */\\n    function _validatePaymasterPrepayment(uint256 opIndex, UserOperation calldata op, UserOpInfo memory opInfo, uint256 requiredPreFund, uint256 gasUsedByValidateAccountPrepayment)\\n    internal returns (bytes memory context, uint256 sigTimeRange) {\\n    unchecked {\\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n        uint256 verificationGasLimit = mUserOp.verificationGasLimit;\\n        require(verificationGasLimit > gasUsedByValidateAccountPrepayment, \\\"AA41 too little verificationGas\\\");\\n        uint256 gas = verificationGasLimit - gasUsedByValidateAccountPrepayment;\\n\\n        address paymaster = mUserOp.paymaster;\\n        DepositInfo storage paymasterInfo = deposits[paymaster];\\n        uint256 deposit = paymasterInfo.deposit;\\n        if (deposit < requiredPreFund) {\\n            revert FailedOp(opIndex, paymaster, \\\"AA31 paymaster deposit too low\\\");\\n        }\\n        paymasterInfo.deposit = uint112(deposit - requiredPreFund);\\n        try IPaymaster(paymaster).validatePaymasterUserOp{gas : gas}(op, opInfo.userOpHash, requiredPreFund) returns (bytes memory _context, uint256 _sigTimeRange){\\n            context = _context;\\n            sigTimeRange = _sigTimeRange;\\n        } catch Error(string memory revertReason) {\\n            revert FailedOp(opIndex, paymaster, revertReason);\\n        } catch {\\n            revert FailedOp(opIndex, paymaster, \\\"AA33 reverted (or OOG)\\\");\\n        }\\n    }\\n    }\\n\\n    /**\\n     * revert if either account sigTimeRange or paymaster sigTimeRange is expired\\n     */\\n    function _validateSigTimeRange(uint256 opIndex, UserOpInfo memory opInfo, uint256 sigTimeRange, uint256 paymasterTimeRange) internal view {\\n        (bool sigFailed, bool outOfTimeRange) = _getSigTimeRange(sigTimeRange);\\n        if (sigFailed) {\\n            revert FailedOp(opIndex, address(0), \\\"AA24 signature error\\\");\\n        }\\n        if (outOfTimeRange) {\\n            revert FailedOp(opIndex, address(0), \\\"AA22 expired or not due\\\");\\n        }\\n        (sigFailed, outOfTimeRange) = _getSigTimeRange(paymasterTimeRange);\\n        if (sigFailed) {\\n            revert FailedOp(opIndex, opInfo.mUserOp.paymaster, \\\"AA34 signature error\\\");\\n        }\\n        if (outOfTimeRange) {\\n            revert FailedOp(opIndex, opInfo.mUserOp.paymaster, \\\"AA32 paymaster expired or not due\\\");\\n        }\\n    }\\n\\n    function _getSigTimeRange(uint sigTimeRange) internal view returns (bool sigFailed, bool outOfTimeRange) {\\n        if (sigTimeRange == 0) {\\n            return (false, false);\\n        }\\n        uint validAfter;\\n        uint validUntil;\\n        (sigFailed, validAfter, validUntil) = _parseSigTimeRange(sigTimeRange);\\n        // solhint-disable-next-line not-rely-on-time\\n        outOfTimeRange = block.timestamp > validUntil || block.timestamp < validAfter;\\n    }\\n\\n    //extract sigFailed, validAfter, validUntil.\\n    // also convert zero validUntil to type(uint64).max\\n    function _parseSigTimeRange(uint sigTimeRange) internal pure returns (bool sigFailed, uint64 validAfter, uint64 validUntil) {\\n        sigFailed = uint8(sigTimeRange) != 0;\\n        // subtract one, to explicitly treat zero as max-value\\n        validUntil = uint64(int64(int(sigTimeRange >> 8) - 1));\\n        validAfter = uint64(sigTimeRange >> (8 + 64));\\n    }\\n\\n    // intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint sigTimeRange, uint paymasterTimeRange) internal pure returns (bool sigFailed, uint64 validAfter, uint64 validUntil) {\\n        (sigFailed, validAfter, validUntil) = _parseSigTimeRange(sigTimeRange);\\n        (bool pmSigFailed, uint64 pmValidAfter, uint64 pmValidUntil) = _parseSigTimeRange(paymasterTimeRange);\\n        sigFailed = sigFailed || pmSigFailed;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n    }\\n\\n    /**\\n     * validate account and paymaster (if defined).\\n     * also make sure total validation doesn't exceed verificationGasLimit\\n     * this method is called off-chain (simulateValidation()) and on-chain (from handleOps)\\n     * @param opIndex the index of this userOp into the \\\"opInfos\\\" array\\n     * @param userOp the userOp to validate\\n     */\\n    function _validatePrepayment(uint256 opIndex, UserOperation calldata userOp, UserOpInfo memory outOpInfo, address aggregator)\\n    private returns (uint256 sigTimeRange, uint256 paymasterTimeRange, address actualAggregator) {\\n\\n        uint256 preGas = gasleft();\\n        MemoryUserOp memory mUserOp = outOpInfo.mUserOp;\\n        _copyUserOpToMemory(userOp, mUserOp);\\n        outOpInfo.userOpHash = getUserOpHash(userOp);\\n\\n        // validate all numeric values in userOp are well below 128 bit, so they can safely be added\\n        // and multiplied without causing overflow\\n        uint256 maxGasValues = mUserOp.preVerificationGas | mUserOp.verificationGasLimit | mUserOp.callGasLimit |\\n        userOp.maxFeePerGas | userOp.maxPriorityFeePerGas;\\n        require(maxGasValues <= type(uint120).max, \\\"AA94 gas values overflow\\\");\\n\\n        uint256 gasUsedByValidateAccountPrepayment;\\n        (uint256 requiredPreFund) = _getRequiredPrefund(mUserOp);\\n        (gasUsedByValidateAccountPrepayment, actualAggregator, sigTimeRange) = _validateAccountPrepayment(opIndex, userOp, outOpInfo, aggregator, requiredPreFund);\\n        //a \\\"marker\\\" where account opcode validation is done and paymaster opcode validation is about to start\\n        // (used only by off-chain simulateValidation)\\n        numberMarker();\\n\\n        bytes memory context;\\n        if (mUserOp.paymaster != address(0)) {\\n            (context, paymasterTimeRange) = _validatePaymasterPrepayment(opIndex, userOp, outOpInfo, requiredPreFund, gasUsedByValidateAccountPrepayment);\\n        }\\n    unchecked {\\n        uint256 gasUsed = preGas - gasleft();\\n\\n        if (userOp.verificationGasLimit < gasUsed) {\\n            revert FailedOp(opIndex, mUserOp.paymaster, \\\"AA40 over verificationGasLimit\\\");\\n        }\\n        outOpInfo.prefund = requiredPreFund;\\n        outOpInfo.contextOffset = getOffsetOfMemoryBytes(context);\\n        outOpInfo.preOpGas = preGas - gasleft() + userOp.preVerificationGas;\\n    }\\n    }\\n\\n    /**\\n     * process post-operation.\\n     * called just after the callData is executed.\\n     * if a paymaster is defined and its validation returned a non-empty context, its postOp is called.\\n     * the excess amount is refunded to the account (or paymaster - if it is was used in the request)\\n     * @param opIndex index in the batch\\n     * @param mode - whether is called from innerHandleOp, or outside (postOpReverted)\\n     * @param opInfo userOp fields and info collected during validation\\n     * @param context the context returned in validatePaymasterUserOp\\n     * @param actualGas the gas used so far by this user operation\\n     */\\n    function _handlePostOp(uint256 opIndex, IPaymaster.PostOpMode mode, UserOpInfo memory opInfo, bytes memory context, uint256 actualGas) private returns (uint256 actualGasCost) {\\n        uint256 preGas = gasleft();\\n    unchecked {\\n        address refundAddress;\\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n        uint256 gasPrice = getUserOpGasPrice(mUserOp);\\n\\n        address paymaster = mUserOp.paymaster;\\n        if (paymaster == address(0)) {\\n            refundAddress = mUserOp.sender;\\n        } else {\\n            refundAddress = paymaster;\\n            if (context.length > 0) {\\n                actualGasCost = actualGas * gasPrice;\\n                if (mode != IPaymaster.PostOpMode.postOpReverted) {\\n                    IPaymaster(paymaster).postOp{gas : mUserOp.verificationGasLimit}(mode, context, actualGasCost);\\n                } else {\\n                    // solhint-disable-next-line no-empty-blocks\\n                    try IPaymaster(paymaster).postOp{gas : mUserOp.verificationGasLimit}(mode, context, actualGasCost) {}\\n                    catch Error(string memory reason) {\\n                        revert FailedOp(opIndex, paymaster, reason);\\n                    }\\n                    catch {\\n                        revert FailedOp(opIndex, paymaster, \\\"A50 postOp revert\\\");\\n                    }\\n                }\\n            }\\n        }\\n        actualGas += preGas - gasleft();\\n        actualGasCost = actualGas * gasPrice;\\n        if (opInfo.prefund < actualGasCost) {\\n            revert FailedOp(opIndex, paymaster, \\\"A51 prefund below actualGasCost\\\");\\n        }\\n        uint256 refund = opInfo.prefund - actualGasCost;\\n        internalIncrementDeposit(refundAddress, refund);\\n        bool success = mode == IPaymaster.PostOpMode.opSucceeded;\\n        emit UserOperationEvent(opInfo.userOpHash, mUserOp.sender, mUserOp.paymaster, mUserOp.nonce, success, actualGasCost, actualGas);\\n    } // unchecked\\n    }\\n\\n    /**\\n     * the gas price this UserOp agrees to pay.\\n     * relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n     */\\n    function getUserOpGasPrice(MemoryUserOp memory mUserOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = mUserOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = mUserOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function getOffsetOfMemoryBytes(bytes memory data) internal pure returns (uint256 offset) {\\n        assembly {offset := data}\\n    }\\n\\n    function getMemoryBytesFromOffset(uint256 offset) internal pure returns (bytes memory data) {\\n        assembly {data := offset}\\n    }\\n\\n    //place the NUMBER opcode in the code.\\n    // this is used as a marker during simulation, as this OP is completely banned from the simulated code of the\\n    // account and paymaster.\\n    function numberMarker() internal view {\\n        assembly {mstore(0, number())}\\n    }\\n}\\n\\n\",\"keccak256\":\"0x4ef1f19e84343f91302260532727469ec22a20f17e4089285a7e171d6e9a0b26\",\"license\":\"GPL-3.0\"},\"contracts/core/SenderCreator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/**\\n * helper contract for EntryPoint, to call userOp.initCode from a \\\"neutral\\\" address,\\n * which is explicitly not the entryPoint itself.\\n */\\ncontract SenderCreator {\\n\\n    /**\\n     * call the \\\"initCode\\\" factory to create and return the sender account address\\n     * @param initCode the initCode value from a UserOp. contains 20 bytes of factory address, followed by calldata\\n     * @return sender the returned address of the created account, or zero address on failure.\\n     */\\n    function createSender(bytes calldata initCode) external returns (address sender) {\\n        address initAddress = address(bytes20(initCode[0 : 20]));\\n        bytes memory initCallData = initCode[20 :];\\n        bool success;\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            success := call(gas(), initAddress, 0, add(initCallData, 0x20), mload(initCallData), 0, 32)\\n            sender := mload(0)\\n        }\\n        if (!success) {\\n            sender = address(0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc8de778c442e06fc259a17a9c35e9e0894c9ba5cc10f3543c7b4d12beed9746b\",\"license\":\"GPL-3.0\"},\"contracts/core/StakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/IStakeManager.sol\\\";\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable not-rely-on-time */\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by a paymaster.\\n */\\nabstract contract StakeManager is IStakeManager {\\n\\n    /// maps paymaster to their deposits and stakes\\n    mapping(address => DepositInfo) public deposits;\\n\\n    function getDepositInfo(address account) public view returns (DepositInfo memory info) {\\n        return deposits[account];\\n    }\\n\\n    // internal method to return just the stake info\\n    function getStakeInfo(address addr) internal view returns (StakeInfo memory info) {\\n        DepositInfo storage depositInfo = deposits[addr];\\n        info.stake = depositInfo.stake;\\n        info.unstakeDelaySec = depositInfo.unstakeDelaySec;\\n    }\\n\\n    /// return the deposit (for gas payment) of the account\\n    function balanceOf(address account) public view returns (uint256) {\\n        return deposits[account].deposit;\\n    }\\n\\n    receive() external payable {\\n        depositTo(msg.sender);\\n    }\\n\\n    function internalIncrementDeposit(address account, uint256 amount) internal {\\n        DepositInfo storage info = deposits[account];\\n        uint256 newAmount = info.deposit + amount;\\n        require(newAmount <= type(uint112).max, \\\"deposit overflow\\\");\\n        info.deposit = uint112(newAmount);\\n    }\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) public payable {\\n        internalIncrementDeposit(account, msg.value);\\n        DepositInfo storage info = deposits[account];\\n        emit Deposited(account, info.deposit);\\n    }\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) public payable {\\n        DepositInfo storage info = deposits[msg.sender];\\n        require(_unstakeDelaySec > 0, \\\"must specify unstake delay\\\");\\n        require(_unstakeDelaySec >= info.unstakeDelaySec, \\\"cannot decrease unstake time\\\");\\n        uint256 stake = info.stake + msg.value;\\n        require(stake > 0, \\\"no stake specified\\\");\\n        require(stake < type(uint112).max, \\\"stake overflow\\\");\\n        deposits[msg.sender] = DepositInfo(\\n            info.deposit,\\n            true,\\n            uint112(stake),\\n            _unstakeDelaySec,\\n            0\\n        );\\n        emit StakeLocked(msg.sender, stake, _unstakeDelaySec);\\n    }\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external {\\n        DepositInfo storage info = deposits[msg.sender];\\n        require(info.unstakeDelaySec != 0, \\\"not staked\\\");\\n        require(info.staked, \\\"already unstaking\\\");\\n        uint64 withdrawTime = uint64(block.timestamp) + info.unstakeDelaySec;\\n        info.withdrawTime = withdrawTime;\\n        info.staked = false;\\n        emit StakeUnlocked(msg.sender, withdrawTime);\\n    }\\n\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external {\\n        DepositInfo storage info = deposits[msg.sender];\\n        uint256 stake = info.stake;\\n        require(stake > 0, \\\"No stake to withdraw\\\");\\n        require(info.withdrawTime > 0, \\\"must call unlockStake() first\\\");\\n        require(info.withdrawTime <= block.timestamp, \\\"Stake withdrawal is not due\\\");\\n        info.unstakeDelaySec = 0;\\n        info.withdrawTime = 0;\\n        info.stake = 0;\\n        emit StakeWithdrawn(msg.sender, withdrawAddress, stake);\\n        (bool success,) = withdrawAddress.call{value : stake}(\\\"\\\");\\n        require(success, \\\"failed to withdraw stake\\\");\\n    }\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external {\\n        DepositInfo storage info = deposits[msg.sender];\\n        require(withdrawAmount <= info.deposit, \\\"Withdraw amount too large\\\");\\n        info.deposit = uint112(info.deposit - withdrawAmount);\\n        emit Withdrawn(msg.sender, withdrawAddress, withdrawAmount);\\n        (bool success,) = withdrawAddress.call{value : withdrawAmount}(\\\"\\\");\\n        require(success, \\\"failed to withdraw\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x053a87b71e154206713aa8445cf828825ed228f4856b9f09b5f468173684ca39\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param aggregator the aggregator used to validate the signature. NULL for non-aggregated signature accounts.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return sigTimeRange signature and time-range of this operation\\n     *      <byte> sigFailure - (1) to mark signature failure, 0 for valid signature.\\n     *      <8-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <8-byte> validAfter - first timestamp this operation is valid\\n     *      The an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, address aggregator, uint256 missingAccountFunds)\\n    external returns (uint256 sigTimeRange);\\n}\\n\",\"keccak256\":\"0x67f26d4dc886ca68f15152262305503bd5a2ed10ca1e22f92a3cec65e788c40b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAggregatedAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IAccount.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\n/**\\n * Aggregated account, that support IAggregator.\\n * - the validateUserOp will be called only after the aggregator validated this account (with all other accounts of this aggregator).\\n * - the validateUserOp MUST valiate the aggregator parameter, and MAY ignore the userOp.signature field.\\n */\\ninterface IAggregatedAccount is IAccount {\\n\\n    /**\\n     * return the address of the signature aggregator the account supports.\\n     */\\n    function getAggregator() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6dc27a6cd5e6a3e929ecfaa619224a32d08ba687221082f66e5325870ab69985\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. then it return data to be used when creating the handleOps:\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatesSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatesSignature);\\n}\\n\",\"keccak256\":\"0xd9571db5b8274d652959060476948d100b07bf5a7e2468bde3b75063d68d3e26\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution)\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param paymaster - if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,\\n     *       this value will be zero (since it failed before accessing the paymaster)\\n     *  @param reason - revert reason\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, address paymaster, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an \\\"actualAggregator\\\" when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factor (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factor (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint64 validAfter;\\n        uint64 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address actualAggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     */\\n    function simulateHandleOp(UserOperation calldata op) external;\\n\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint64 validAfter, uint64 validBefore);\\n}\\n\\n\",\"keccak256\":\"0x29065c65071d31ba1833f4562da03b1ffa83a41968358cd6a99ecbf14fe0f25a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n\\n    /**\\n     * payment validation: check if paymaster agree to pay.\\n     * Must verify sender is the entryPoint.\\n     * Revert to reject this request.\\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\\n     * @param userOp the user operation\\n     * @param userOpHash hash of the user's request data.\\n     * @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\\n     * @return context value to send to a postOp\\n     *  zero length to signify postOp is not required.\\n     * @return sigTimeRange signature and time-range of this operation, encoded the same as the return value of validateUserOperation\\n     *      <byte> sigFailure - (1) to mark signature failure (needed only if paymaster uses signature-based validation,)\\n     *      <4-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <4-byte> validAfter - first timestamp this operation is valid\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n    external returns (bytes memory context, uint256 sigTimeRange);\\n\\n    /**\\n     * post-operation handler.\\n     * Must verify sender is the entryPoint\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external;\\n\\n    enum PostOpMode {\\n        opSucceeded, // user op succeeded\\n        opReverted, // user op reverted. still has to pay for gas.\\n        postOpReverted //user op succeeded, but caused postOp to revert. Now its a 2nd call, after user's op was deliberately reverted.\\n    }\\n}\\n\",\"keccak256\":\"0xdd89f17a8018213e522a5098780f34b35399d7dcb237e5036f5e2e7196968502\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by a paymaster.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 withdrawTime\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the account's deposit\\n     * @param staked true if this account is staked as a paymaster\\n     * @param stake actual amount of ether staked for this paymaster.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake. must be above the global unstakeDelaySec\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    64 bit for full timestamp\\n     *    32 bit allow 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint64 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd48188743596c7679eae45ed7d481f3992a47c92384caa643b730e630a33a2fe\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor\\n     * @param callData the method call to execute on this account.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter\\n     * @param paymasterAndData if set, this field hold the paymaster address and \\\"paymaster-specific-data\\\". the paymaster will pay for the transaction instead of the sender\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        //lighter signature scheme. must match UserOp.ts#packUserOp\\n        bytes calldata sig = userOp.signature;\\n        // copy directly the userOp from calldata up to (but not including) the signature.\\n        // this encoding depends on the ABI encoding of calldata, but is much lighter to copy\\n        // than referencing each field separately.\\n        assembly {\\n            let ofs := userOp\\n            let len := sub(sub(sig.offset, ofs), 32)\\n            ret := mload(0x40)\\n            mstore(0x40, add(ret, add(len, 32)))\\n            mstore(ret, len)\\n            calldatacopy(add(ret, 32), ofs, len)\\n        }\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x548134a6c652a9e4730beb582b94785587f93f91b0dded2a27bbda3048911ddd\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a0604052604051620000129062000050565b604051809103906000f0801580156200002f573d6000803e3d6000fd5b506001600160a01b03166080523480156200004957600080fd5b506200005e565b6102338062003f5383390190565b608051613ed2620000816000396000818161114f0152612d770152613ed26000f3fe6080604052600436106100f75760003560e01c80639b249f691161008a578063c207711611610059578063c2077116146103bb578063c23a5cea146103db578063ee219423146103fb578063fc7e286d1461041b57600080fd5b80639b249f6914610353578063a619353114610373578063b760faf914610393578063bb9fe6bf146103a657600080fd5b80634b1d7cf5116100c65780634b1d7cf5146101925780635287ce12146101b257806370a08231146102f85780638f41ec5a1461033e57600080fd5b80630396cb601461010c5780631d7327561461011f5780631fad948c14610152578063205c28781461017257600080fd5b3661010757610105336104f9565b005b600080fd5b61010561011a366004613042565b610567565b34801561012b57600080fd5b5061013f61013a36600461317c565b610883565b6040519081526020015b60405180910390f35b34801561015e57600080fd5b5061010561016d366004613305565b610a55565b34801561017e57600080fd5b5061010561018d36600461335c565b610b98565b34801561019e57600080fd5b506101056101ad366004613305565b610d4c565b3480156101be57600080fd5b506102976101cd366004613388565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b031660009081526020818152604091829020825160a08101845281546dffffffffffffffffffffffffffff80821683526e010000000000000000000000000000820460ff161515948301949094526f0100000000000000000000000000000090049092169282019290925260019091015463ffffffff81166060830152640100000000900467ffffffffffffffff16608082015290565b6040805182516dffffffffffffffffffffffffffff908116825260208085015115159083015283830151169181019190915260608083015163ffffffff169082015260809182015167ffffffffffffffff169181019190915260a001610149565b34801561030457600080fd5b5061013f610313366004613388565b6001600160a01b03166000908152602081905260409020546dffffffffffffffffffffffffffff1690565b34801561034a57600080fd5b5061013f600181565b34801561035f57600080fd5b5061010561036e3660046133a5565b61111f565b34801561037f57600080fd5b5061013f61038e3660046133e7565b611207565b6101056103a1366004613388565b6104f9565b3480156103b257600080fd5b50610105611249565b3480156103c757600080fd5b506101056103d63660046133e7565b6113c8565b3480156103e757600080fd5b506101056103f6366004613388565b61146c565b34801561040757600080fd5b506101056104163660046133e7565b6116ee565b34801561042757600080fd5b506104aa610436366004613388565b600060208190529081526040902080546001909101546dffffffffffffffffffffffffffff808316926e010000000000000000000000000000810460ff16926f010000000000000000000000000000009091049091169063ffffffff811690640100000000900467ffffffffffffffff1685565b604080516dffffffffffffffffffffffffffff96871681529415156020860152929094169183019190915263ffffffff16606082015267ffffffffffffffff909116608082015260a001610149565b61050381346119c1565b6001600160a01b03811660008181526020818152604091829020805492516dffffffffffffffffffffffffffff909316835292917f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c491015b60405180910390a25050565b33600090815260208190526040902063ffffffff82166105ce5760405162461bcd60e51b815260206004820152601a60248201527f6d757374207370656369667920756e7374616b652064656c617900000000000060448201526064015b60405180910390fd5b600181015463ffffffff908116908316101561062c5760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f7420646563726561736520756e7374616b652074696d650000000060448201526064016105c5565b805460009061065f9034906f0100000000000000000000000000000090046dffffffffffffffffffffffffffff16613452565b9050600081116106b15760405162461bcd60e51b815260206004820152601260248201527f6e6f207374616b6520737065636966696564000000000000000000000000000060448201526064016105c5565b6dffffffffffffffffffffffffffff811061070e5760405162461bcd60e51b815260206004820152600e60248201527f7374616b65206f766572666c6f7700000000000000000000000000000000000060448201526064016105c5565b6040805160a08101825283546dffffffffffffffffffffffffffff90811682526001602080840182815286841685870190815263ffffffff808b16606088019081526000608089018181523380835296829052908a9020985189549551945189166f01000000000000000000000000000000027fffffff0000000000000000000000000000ffffffffffffffffffffffffffffff9515156e010000000000000000000000000000027fffffffffffffffffffffffffffffffffff0000000000000000000000000000009097169190991617949094179290921695909517865551949092018054925167ffffffffffffffff16640100000000027fffffffffffffffffffffffffffffffffffffffff000000000000000000000000909316949093169390931717905590517fa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c0190610876908490879091825263ffffffff16602082015260400190565b60405180910390a2505050565b6000805a90503330146108d85760405162461bcd60e51b815260206004820152601760248201527f4141393220696e7465726e616c2063616c6c206f6e6c7900000000000000000060448201526064016105c5565b8451604081015160608201518101611388015a101561091b577fdeaddead0000000000000000000000000000000000000000000000000000000060005260206000fd5b600088156109f25760008084600001516001600160a01b0316848d8d60405161094592919061346a565b60006040518083038160008787f1925050503d8060008114610983576040519150601f19603f3d011682016040523d82523d6000602084013e610988565b606091505b5091509150816109ef578051156109ea5784600001516001600160a01b03168a602001517f1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a2018760200151846040516109e19291906134d2565b60405180910390a35b600192505b50505b600088608001515a8603019050610a446000838b8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250611a97915050565b955050505050505b95945050505050565b8160008167ffffffffffffffff811115610a7157610a716130b1565b604051908082528060200260200182016040528015610aaa57816020015b610a97612fb8565b815260200190600190039081610a8f5790505b50905060005b82811015610b25576000828281518110610acc57610acc6134eb565b60200260200101519050600080610b09848a8a87818110610aef57610aef6134eb565b9050602002810190610b01919061351a565b856000611dc9565b5091509150610b1a84848484611f66565b505050600101610ab0565b506000805b83811015610b8557610b7981888884818110610b4857610b486134eb565b9050602002810190610b5a919061351a565b858481518110610b6c57610b6c6134eb565b6020026020010151612138565b90910190600101610b2a565b50610b90848261229a565b505050505050565b33600090815260208190526040902080546dffffffffffffffffffffffffffff16821115610c085760405162461bcd60e51b815260206004820152601960248201527f576974686472617720616d6f756e7420746f6f206c617267650000000000000060448201526064016105c5565b8054610c259083906dffffffffffffffffffffffffffff16613558565b81547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff91909116178155604080516001600160a01b03851681526020810184905233917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb910160405180910390a26000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610cf0576040519150601f19603f3d011682016040523d82523d6000602084013e610cf5565b606091505b5050905080610d465760405162461bcd60e51b815260206004820152601260248201527f6661696c656420746f207769746864726177000000000000000000000000000060448201526064016105c5565b50505050565b816000805b82811015610da657858582818110610d6b57610d6b6134eb565b9050602002810190610d7d919061356f565b610d8790806135a3565b610d92915083613452565b915080610d9e8161360b565b915050610d51565b5060008167ffffffffffffffff811115610dc257610dc26130b1565b604051908082528060200260200182016040528015610dfb57816020015b610de8612fb8565b815260200190600190039081610de05790505b5090506000805b84811015610fb65736888883818110610e1d57610e1d6134eb565b9050602002810190610e2f919061356f565b9050366000610e3e83806135a3565b90925090506000610e556040850160208601613388565b90508160005b81811015610ee7576000898981518110610e7757610e776134eb565b60200260200101519050600080610eb38b898987818110610e9a57610e9a6134eb565b9050602002810190610eac919061351a565b8589611dc9565b5091509150610ec484848484611f66565b8a610ece8161360b565b9b50505050508080610edf9061360b565b915050610e5b565b506001600160a01b03821615610f9e576001600160a01b03821663e3563a4f8585610f1560408a018a613644565b6040518563ffffffff1660e01b8152600401610f34949392919061382f565b60006040518083038186803b158015610f4c57600080fd5b505afa925050508015610f5d575060015b610f9e576040517f86a9f7500000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016105c5565b50505050508080610fae9061360b565b915050610e02565b50600080915060005b858110156110d65736898983818110610fda57610fda6134eb565b9050602002810190610fec919061356f565b90507f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d61101f6040830160208401613388565b6040516001600160a01b03909116815260200160405180910390a136600061104783806135a3565b90925090508060005b818110156110be576110928885858481811061106e5761106e6134eb565b9050602002810190611080919061351a565b8b8b81518110610b6c57610b6c6134eb565b61109c9088613452565b9650876110a88161360b565b98505080806110b69061360b565b915050611050565b505050505080806110ce9061360b565b915050610fbf565b50604051600081527f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d9060200160405180910390a1611115868261229a565b5050505050505050565b6040517f570e1a360000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063570e1a369061118690859085906004016138e6565b6020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c991906138fa565b6040517f6ca7b8060000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016105c5565b600061121282612398565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b336000908152602081905260409020600181015463ffffffff166112af5760405162461bcd60e51b815260206004820152600a60248201527f6e6f74207374616b65640000000000000000000000000000000000000000000060448201526064016105c5565b80546e010000000000000000000000000000900460ff166113125760405162461bcd60e51b815260206004820152601160248201527f616c726561647920756e7374616b696e6700000000000000000000000000000060448201526064016105c5565b600181015460009061132a9063ffffffff1642613917565b6001830180547fffffffffffffffffffffffffffffffffffffffff0000000000000000ffffffff1664010000000067ffffffffffffffff84169081029190911790915583547fffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffff16845560405190815290915033907ffa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a9060200161055b565b6113d0612fb8565b6000806113e1600085856001611dc9565b50915091506000806113f384846123b1565b925092505061140143600052565b600061140f60008888612138565b60808701516040517fcd8ac24600000000000000000000000000000000000000000000000000000000815260048101919091526024810182905267ffffffffffffffff8086166044830152841660648201529091506084016105c5565b33600090815260208190526040902080546f0100000000000000000000000000000090046dffffffffffffffffffffffffffff16806114ed5760405162461bcd60e51b815260206004820152601460248201527f4e6f207374616b6520746f20776974686472617700000000000000000000000060448201526064016105c5565b6001820154640100000000900467ffffffffffffffff166115505760405162461bcd60e51b815260206004820152601d60248201527f6d7573742063616c6c20756e6c6f636b5374616b65282920666972737400000060448201526064016105c5565b60018201544264010000000090910467ffffffffffffffff1611156115b75760405162461bcd60e51b815260206004820152601b60248201527f5374616b65207769746864726177616c206973206e6f7420647565000000000060448201526064016105c5565b6001820180547fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016905581547fffffff0000000000000000000000000000ffffffffffffffffffffffffffffff168255604080516001600160a01b03851681526020810183905233917fb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3910160405180910390a26000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114611698576040519150601f19603f3d011682016040523d82523d6000602084013e61169d565b606091505b5050905080610d465760405162461bcd60e51b815260206004820152601860248201527f6661696c656420746f207769746864726177207374616b65000000000000000060448201526064016105c5565b6116f6612fb8565b6000806000611709600086866001611dc9565b865160a00151604080518082018252600080825260208083018281526001600160a01b03958616835282825284832080546dffffffffffffffffffffffffffff6f01000000000000000000000000000000918290048116875260019283015463ffffffff9081169094528f51518851808a018a5287815280870188815291909a168752868652888720805493909304909116895291015490911690528351808501909452818452830152949750929550909350903660006117cd60408b018b613644565b9092509050600060148210156117e45760006117ff565b6117f2601460008486613943565b6117fb9161396d565b60601c5b604080518082018252600080825260208083018281526001600160a01b03861683529082905292902080546f0100000000000000000000000000000090046dffffffffffffffffffffffffffff1682526001015463ffffffff169091529091509350505050600080600061187389896123b1565b92509250925060006040518060c001604052808c6080015181526020018c60400151815260200185151581526020018467ffffffffffffffff1681526020018367ffffffffffffffff1681526020016118cd8d6060015190565b905290506001600160a01b03881615611987576040805180820182526001600160a01b038a1680825282518084018452600080825260208083018281529382528181529085902080546f0100000000000000000000000000000090046dffffffffffffffffffffffffffff1683526001015463ffffffff169092529082015290517f356877a30000000000000000000000000000000000000000000000000000000081526105c5908390899089908c908690600401613a0e565b808686896040517ff04297e90000000000000000000000000000000000000000000000000000000081526004016105c59493929190613a8e565b6001600160a01b038216600090815260208190526040812080549091906119f99084906dffffffffffffffffffffffffffff16613452565b90506dffffffffffffffffffffffffffff811115611a595760405162461bcd60e51b815260206004820152601060248201527f6465706f736974206f766572666c6f770000000000000000000000000000000060448201526064016105c5565b81547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff919091161790555050565b6000805a855190915060009081611aad8261242e565b60a08301519091506001600160a01b038116611acc5782519350611ca1565b809350600088511115611ca157868202955060028a6002811115611af257611af2613ae1565b14611b7d5760608301516040517fa9a234090000000000000000000000000000000000000000000000000000000081526001600160a01b0383169163a9a2340991611b45908e908d908c90600401613b10565b600060405180830381600088803b158015611b5f57600080fd5b5087f1158015611b73573d6000803e3d6000fd5b5050505050611ca1565b60608301516040517fa9a234090000000000000000000000000000000000000000000000000000000081526001600160a01b0383169163a9a2340991611bcb908e908d908c90600401613b10565b600060405180830381600088803b158015611be557600080fd5b5087f193505050508015611bf7575060015b611ca157611c03613b70565b806308c379a01415611c415750611c18613b8c565b80611c235750611c43565b8b828260405162fa072b60e01b81526004016105c593929190613c34565b505b60405162fa072b60e01b8152600481018c90526001600160a01b038216602482015260606044820152601160648201527f41353020706f73744f7020726576657274000000000000000000000000000000608482015260a4016105c5565b5a85038701965081870295508589604001511015611d175760405162fa072b60e01b8152600481018c90526001600160a01b038216602482015260606044820152601f60648201527f4135312070726566756e642062656c6f772061637475616c476173436f737400608482015260a4016105c5565b6040890151869003611d2985826119c1565b6000808c6002811115611d3e57611d3e613ae1565b1490508460a001516001600160a01b031685600001516001600160a01b03168c602001517f49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f8860200151858d8f604051611db1949392919093845291151560208401526040830152606082015260800190565b60405180910390a45050505050505095945050505050565b6000806000805a8651909150611ddf888261245f565b611de888611207565b6020880152604081015160608201516080830151171760e089013517610100890135176effffffffffffffffffffffffffffff811115611e6a5760405162461bcd60e51b815260206004820152601860248201527f41413934206761732076616c756573206f766572666c6f77000000000000000060448201526064016105c5565b600080611e7684612558565b9050611e858c8c8c8c856125a6565b995096509150611e9443600052565b60a08401516060906001600160a01b031615611ebc57611eb78d8d8d85876129a5565b985090505b60005a87039050808d60a001351015611f36578d8660a0015160405162fa072b60e01b81526004016105c59291909182526001600160a01b03166020820152606060408201819052601e908201527f41413430206f76657220766572696669636174696f6e4761734c696d69740000608082015260a00190565b60408c018390528160608d015260c08d01355a8803018c6080018181525050505050505050509450945094915050565b600080611f7284612c09565b915091508115611fd25760405162fa072b60e01b8152600481018790526000602482015260606044820152601460648201527f41413234207369676e6174757265206572726f72000000000000000000000000608482015260a4016105c5565b801561202e5760405162fa072b60e01b8152600481018790526000602482015260606044820152601760648201527f414132322065787069726564206f72206e6f7420647565000000000000000000608482015260a4016105c5565b61203783612c09565b909250905081156120a757845160a0015160405162fa072b60e01b8152600481018890526001600160a01b03909116602482015260606044820152601460648201527f41413334207369676e6174757265206572726f72000000000000000000000000608482015260a4016105c5565b8015610b9057845160a0015160405162fa072b60e01b8152600481018890526001600160a01b03909116602482015260606044820152602160648201527f41413332207061796d61737465722065787069726564206f72206e6f7420647560848201527f650000000000000000000000000000000000000000000000000000000000000060a482015260c4016105c5565b6000805a9050600061214b846060015190565b905030631d7327566121606060880188613644565b87856040518563ffffffff1660e01b81526004016121819493929190613c5c565b6020604051808303816000875af19250505080156121bc575060408051601f3d908101601f191682019092526121b991810190613d10565b60015b61228e57600060206000803e506000517fdeaddead0000000000000000000000000000000000000000000000000000000081141561225957845160a0015160405162fa072b60e01b8152600481018990526001600160a01b03909116602482015260606044820152600f60648201527f41413935206f7574206f66206761730000000000000000000000000000000000608482015260a4016105c5565b600085608001515a61226b9086613558565b6122759190613452565b9050612285886002888685611a97565b94505050612291565b92505b50509392505050565b6001600160a01b0382166122f05760405162461bcd60e51b815260206004820152601860248201527f4141393020696e76616c69642062656e6566696369617279000000000000000060448201526064016105c5565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461233d576040519150601f19603f3d011682016040523d82523d6000602084013e612342565b606091505b50509050806123935760405162461bcd60e51b815260206004820152601f60248201527f41413931206661696c65642073656e6420746f2062656e65666963696172790060448201526064016105c5565b505050565b60006123a382612c52565b805190602001209050919050565b60008060006123bf85612c91565b91945092509050600080806123d387612c91565b92509250925085806123e25750825b95508167ffffffffffffffff168567ffffffffffffffff161015612404578194505b8067ffffffffffffffff168467ffffffffffffffff161115612424578093505b5050509250925092565b60c081015160e0820151600091908082141561244b575092915050565b61245782488301612cb7565b949350505050565b61246c6020830183613388565b6001600160a01b0316815260208083013590820152608080830135604083015260a0830135606083015260c0808401359183019190915260e08084013591830191909152610100830135908201523660006124cb610120850185613644565b9092509050801561254b5760148110156125275760405162461bcd60e51b815260206004820152601d60248201527f4141393320696e76616c6964207061796d6173746572416e644461746100000060448201526064016105c5565b612535601460008385613943565b61253e9161396d565b60601c60a0840152610d46565b600060a084015250505050565b60a081015160009081906001600160a01b0316612576576001612579565b60035b60ff169050600083608001518285606001510285604001510101905061259e8461242e565b029392505050565b6000806000805a87518051919250906125cc8b8a6125c760408e018e613644565b612ccf565b6001600160a01b0388166001141561273f576125e743600052565b6001600160a01b0381163b61264c5760405162fa072b60e01b8152600060048201819052602482015260606044820152601960648201527f41413230206163636f756e74206e6f74206465706c6f79656400000000000000608482015260a4016105c5565b60a08201516001600160a01b031615801590612674575060a08201516001600160a01b03163b155b156126cf5760405162fa072b60e01b8152600060048201819052602482015260606044820152601b60648201527f41413330207061796d6173746572206e6f74206465706c6f7965640000000000608482015260a4016105c5565b806001600160a01b0316633ad59dbc6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612729575060408051601f3d908101601f19168201909252612726918101906138fa565b60015b612739576000945084975061273f565b97508794505b60a08201516000906001600160a01b038116612794576001600160a01b0383166000908152602081905260409020546dffffffffffffffffffffffffffff1689811161278d57808a03612790565b60005b9250505b826001600160a01b0316630825d1fc85606001518e8e602001518e876040518663ffffffff1660e01b81526004016127cf9493929190613d29565b60206040518083038160008887f19350505050801561280b575060408051601f3d908101601f1916820190925261280891810190613d10565b60015b6128ae57612817613b70565b806308c379a01415612856575061282c613b8c565b806128375750612858565b8d60008260405162fa072b60e01b81526004016105c593929190613c34565b505b60405162fa072b60e01b8152600481018e90526000602482015260606044820152601660648201527f4141323320726576657274656420286f72204f4f472900000000000000000000608482015260a4016105c5565b95506001600160a01b038116612990576001600160a01b038316600090815260208190526040902080546dffffffffffffffffffffffffffff16808b1115612954578e600060405162fa072b60e01b81526004016105c59291909182526001600160a01b031660208201526060604082018190526017908201527f41413231206469646e2774207061792070726566756e64000000000000000000608082015260a00190565b81547fffffffffffffffffffffffffffffffffffff000000000000000000000000000016908b90036dffffffffffffffffffffffffffff161790555b5a850397505050505050955095509592505050565b82516060818101519091600091848111612a015760405162461bcd60e51b815260206004820152601f60248201527f4141343120746f6f206c6974746c6520766572696669636174696f6e4761730060448201526064016105c5565b60a08201516001600160a01b038116600090815260208190526040902080548784039291906dffffffffffffffffffffffffffff1689811015612a9c5760405162fa072b60e01b8152600481018e90526001600160a01b038416602482015260606044820152601e60648201527f41413331207061796d6173746572206465706f73697420746f6f206c6f770000608482015260a4016105c5565b8981038260000160006101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550826001600160a01b031663f465c77e858e8e602001518e6040518563ffffffff1660e01b8152600401612b0a93929190613d61565b60006040518083038160008887f193505050508015612b4b57506040513d6000823e601f3d908101601f19168201604052612b489190810190613d86565b60015b612bf557612b57613b70565b806308c379a01415612b955750612b6c613b8c565b80612b775750612b97565b8d848260405162fa072b60e01b81526004016105c593929190613c34565b505b60405162fa072b60e01b8152600481018e90526001600160a01b038416602482015260606044820152601660648201527f4141333320726576657274656420286f72204f4f472900000000000000000000608482015260a4016105c5565b909e909d509b505050505050505050505050565b60008082612c1c57506000928392509050565b600080612c2885612c91565b91955067ffffffffffffffff908116935016905042811080612c4957508142105b92505050915091565b6060366000612c65610140850185613644565b915091508360208184030360405194506020810185016040528085528082602087013750505050919050565b60ff81161515600080612ca96001600886901c613e28565b929460489490941c93915050565b6000818310612cc65781612cc8565b825b9392505050565b8015610d46578251516001600160a01b0381163b15612d3e5760405162fa072b60e01b8152600481018690526000602482015260606044820152601f60648201527f414131302073656e64657220616c726561647920636f6e737472756374656400608482015260a4016105c5565b8351606001516040517f570e1a360000000000000000000000000000000000000000000000000000000081526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163570e1a369190612daf90889088906004016138e6565b60206040518083038160008887f1158015612dce573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612df391906138fa565b90506001600160a01b038116612e595760405162fa072b60e01b8152600481018790526000602482015260606044820152601b60648201527f4141313320696e6974436f6465206661696c6564206f72204f4f470000000000608482015260a4016105c5565b816001600160a01b0316816001600160a01b031614612ec85760405162fa072b60e01b8152600481018790526000602482015260606044820152602060648201527f4141313420696e6974436f6465206d7573742072657475726e2073656e646572608482015260a4016105c5565b6001600160a01b0381163b612f2d5760405162fa072b60e01b8152600481018790526000602482015260606044820152602060648201527f4141313520696e6974436f6465206d757374206372656174652073656e646572608482015260a4016105c5565b6000612f3c6014828688613943565b612f459161396d565b60601c9050826001600160a01b031686602001517fd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d83896000015160a00151604051612fa79291906001600160a01b0392831681529116602082015260400190565b60405180910390a350505050505050565b6040518060a0016040528061301d60405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b8152602001600080191681526020016000815260200160008152602001600081525090565b60006020828403121561305457600080fd5b813563ffffffff81168114612cc857600080fd5b60008083601f84011261307a57600080fd5b50813567ffffffffffffffff81111561309257600080fd5b6020830191508360208285010111156130aa57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810181811067ffffffffffffffff82111715613100576131006130b1565b60405250565b610100810181811067ffffffffffffffff82111715613100576131006130b1565b601f19601f830116810181811067ffffffffffffffff8211171561314d5761314d6130b1565b6040525050565b6001600160a01b038116811461316957600080fd5b50565b803561317781613154565b919050565b60008060008060008587036101c081121561319657600080fd5b863567ffffffffffffffff808211156131ae57600080fd5b6131ba8a838b01613068565b9098509650601f1992909201916101809150818312156131d957600080fd5b6040516131e5816130e0565b610100808512156131f557600080fd5b604051945061320385613106565b61320f60208c0161316c565b855260408b0135602086015260608b0135604086015260808b0135606086015260a08b0135608086015261324560c08c0161316c565b60a086015260e08b81013560c0870152908b0135908501529283526101208901356020840152610140890135604084015261016089013560608401528189013560808401529194506101a088013591808311156132a157600080fd5b50506132af88828901613068565b969995985093965092949392505050565b60008083601f8401126132d257600080fd5b50813567ffffffffffffffff8111156132ea57600080fd5b6020830191508360208260051b85010111156130aa57600080fd5b60008060006040848603121561331a57600080fd5b833567ffffffffffffffff81111561333157600080fd5b61333d868287016132c0565b909450925050602084013561335181613154565b809150509250925092565b6000806040838503121561336f57600080fd5b823561337a81613154565b946020939093013593505050565b60006020828403121561339a57600080fd5b8135612cc881613154565b600080602083850312156133b857600080fd5b823567ffffffffffffffff8111156133cf57600080fd5b6133db85828601613068565b90969095509350505050565b6000602082840312156133f957600080fd5b813567ffffffffffffffff81111561341057600080fd5b82016101608185031215612cc857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561346557613465613423565b500190565b8183823760009101908152919050565b60005b8381101561349557818101518382015260200161347d565b83811115610d465750506000910152565b600081518084526134be81602086016020860161347a565b601f01601f19169290920160200192915050565b82815260406020820152600061245760408301846134a6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea183360301811261354e57600080fd5b9190910192915050565b60008282101561356a5761356a613423565b500390565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261354e57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126135d857600080fd5b83018035915067ffffffffffffffff8211156135f357600080fd5b6020019150600581901b36038213156130aa57600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561363d5761363d613423565b5060010190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261367957600080fd5b83018035915067ffffffffffffffff82111561369457600080fd5b6020019150368190038213156130aa57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126136de57600080fd5b830160208101925035905067ffffffffffffffff8111156136fe57600080fd5b8036038313156130aa57600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006101606137578461374a8561316c565b6001600160a01b03169052565b6020830135602085015261376e60408401846136a9565b826040870152613781838701828461370d565b9250505061379260608401846136a9565b85830360608701526137a583828461370d565b925050506080830135608085015260a083013560a085015260c083013560c085015260e083013560e08501526101008084013581860152506101206137ec818501856136a9565b868403838801526137fe84828461370d565b9350505050610140613812818501856136a9565b8684038388015261382484828461370d565b979650505050505050565b6040808252810184905260006060600586901b830181019083018783805b898110156138cf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa087860301845282357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea18c36030181126138ad578283fd5b6138b9868d8301613738565b955050602093840193929092019160010161384d565b50505050828103602084015261382481858761370d565b60208152600061245760208301848661370d565b60006020828403121561390c57600080fd5b8151612cc881613154565b600067ffffffffffffffff80831681851680830382111561393a5761393a613423565b01949350505050565b6000808585111561395357600080fd5b8386111561396057600080fd5b5050820193919092039150565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156139ad5780818660140360031b1b83161692505b505092915050565b80518252602081015160208301526040810151151560408301526000606082015167ffffffffffffffff8082166060860152806080850151166080860152505060a082015160c060a085015261245760c08501826134a6565b6000610140808352613a22818401896139b5565b915050613a3c602083018780518252602090810151910152565b845160608301526020948501516080830152835160a08301529284015160c082015281516001600160a01b031660e0820152908301518051610100830152909201516101209092019190915292915050565b60e081526000613aa160e08301876139b5565b9050613aba602083018680518252602090810151910152565b8351606083015260208401516080830152825160a0830152602083015160c0830152610a4c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060038510613b49577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b84825260606020830152613b6060608301856134a6565b9050826040830152949350505050565b600060033d1115613b895760046000803e5060005160e01c5b90565b600060443d1015613b9a5790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715613be857505050505090565b8285019150815181811115613c005750505050505090565b843d8701016020828501011115613c1a5750505050505090565b613c2960208286010187613127565b509095945050505050565b8381526001600160a01b0383166020820152606060408201526000610a4c60608301846134a6565b60006101c0808352613c71818401878961370d565b905084516001600160a01b03808251166020860152602082015160408601526040820151606086015260608201516080860152608082015160a08601528060a08301511660c08601525060c081015160e085015260e08101516101008501525060208501516101208401526040850151610140840152606085015161016084015260808501516101808401528281036101a084015261382481856134a6565b600060208284031215613d2257600080fd5b5051919050565b608081526000613d3c6080830187613738565b6020830195909552506001600160a01b03929092166040830152606090910152919050565b606081526000613d746060830186613738565b60208301949094525060400152919050565b60008060408385031215613d9957600080fd5b825167ffffffffffffffff80821115613db157600080fd5b818501915085601f830112613dc557600080fd5b815181811115613dd757613dd76130b1565b6040519150613df06020601f19601f8401160183613127565b808252866020828501011115613e0557600080fd5b613e1681602084016020860161347a565b50602094909401519395939450505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615613e6257613e62613423565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615613e9657613e96613423565b5050039056fea2646970667358221220c2416c4f4cc85d128ec61d60b94a953e0ef3b9707bd65c2eb763c9132e08ed4964736f6c634300080c0033608060405234801561001057600080fd5b50610213806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063570e1a3614610030575b600080fd5b61004361003e3660046100f9565b61006c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60008061007c601482858761016b565b61008591610195565b60601c90506000610099846014818861016b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525084519495509360209350849250905082850182875af190506000519350806100f057600093505b50505092915050565b6000806020838503121561010c57600080fd5b823567ffffffffffffffff8082111561012457600080fd5b818501915085601f83011261013857600080fd5b81358181111561014757600080fd5b86602082850101111561015957600080fd5b60209290920196919550909350505050565b6000808585111561017b57600080fd5b8386111561018857600080fd5b5050820193919092039150565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156101d55780818660140360031b1b83161692505b50509291505056fea2646970667358221220751828242a2f0a1fb4412985356908f9e1e02269dc251470122be26f6a3c54e864736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80639b249f691161008a578063c207711611610059578063c2077116146103bb578063c23a5cea146103db578063ee219423146103fb578063fc7e286d1461041b57600080fd5b80639b249f6914610353578063a619353114610373578063b760faf914610393578063bb9fe6bf146103a657600080fd5b80634b1d7cf5116100c65780634b1d7cf5146101925780635287ce12146101b257806370a08231146102f85780638f41ec5a1461033e57600080fd5b80630396cb601461010c5780631d7327561461011f5780631fad948c14610152578063205c28781461017257600080fd5b3661010757610105336104f9565b005b600080fd5b61010561011a366004613042565b610567565b34801561012b57600080fd5b5061013f61013a36600461317c565b610883565b6040519081526020015b60405180910390f35b34801561015e57600080fd5b5061010561016d366004613305565b610a55565b34801561017e57600080fd5b5061010561018d36600461335c565b610b98565b34801561019e57600080fd5b506101056101ad366004613305565b610d4c565b3480156101be57600080fd5b506102976101cd366004613388565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b031660009081526020818152604091829020825160a08101845281546dffffffffffffffffffffffffffff80821683526e010000000000000000000000000000820460ff161515948301949094526f0100000000000000000000000000000090049092169282019290925260019091015463ffffffff81166060830152640100000000900467ffffffffffffffff16608082015290565b6040805182516dffffffffffffffffffffffffffff908116825260208085015115159083015283830151169181019190915260608083015163ffffffff169082015260809182015167ffffffffffffffff169181019190915260a001610149565b34801561030457600080fd5b5061013f610313366004613388565b6001600160a01b03166000908152602081905260409020546dffffffffffffffffffffffffffff1690565b34801561034a57600080fd5b5061013f600181565b34801561035f57600080fd5b5061010561036e3660046133a5565b61111f565b34801561037f57600080fd5b5061013f61038e3660046133e7565b611207565b6101056103a1366004613388565b6104f9565b3480156103b257600080fd5b50610105611249565b3480156103c757600080fd5b506101056103d63660046133e7565b6113c8565b3480156103e757600080fd5b506101056103f6366004613388565b61146c565b34801561040757600080fd5b506101056104163660046133e7565b6116ee565b34801561042757600080fd5b506104aa610436366004613388565b600060208190529081526040902080546001909101546dffffffffffffffffffffffffffff808316926e010000000000000000000000000000810460ff16926f010000000000000000000000000000009091049091169063ffffffff811690640100000000900467ffffffffffffffff1685565b604080516dffffffffffffffffffffffffffff96871681529415156020860152929094169183019190915263ffffffff16606082015267ffffffffffffffff909116608082015260a001610149565b61050381346119c1565b6001600160a01b03811660008181526020818152604091829020805492516dffffffffffffffffffffffffffff909316835292917f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c491015b60405180910390a25050565b33600090815260208190526040902063ffffffff82166105ce5760405162461bcd60e51b815260206004820152601a60248201527f6d757374207370656369667920756e7374616b652064656c617900000000000060448201526064015b60405180910390fd5b600181015463ffffffff908116908316101561062c5760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f7420646563726561736520756e7374616b652074696d650000000060448201526064016105c5565b805460009061065f9034906f0100000000000000000000000000000090046dffffffffffffffffffffffffffff16613452565b9050600081116106b15760405162461bcd60e51b815260206004820152601260248201527f6e6f207374616b6520737065636966696564000000000000000000000000000060448201526064016105c5565b6dffffffffffffffffffffffffffff811061070e5760405162461bcd60e51b815260206004820152600e60248201527f7374616b65206f766572666c6f7700000000000000000000000000000000000060448201526064016105c5565b6040805160a08101825283546dffffffffffffffffffffffffffff90811682526001602080840182815286841685870190815263ffffffff808b16606088019081526000608089018181523380835296829052908a9020985189549551945189166f01000000000000000000000000000000027fffffff0000000000000000000000000000ffffffffffffffffffffffffffffff9515156e010000000000000000000000000000027fffffffffffffffffffffffffffffffffff0000000000000000000000000000009097169190991617949094179290921695909517865551949092018054925167ffffffffffffffff16640100000000027fffffffffffffffffffffffffffffffffffffffff000000000000000000000000909316949093169390931717905590517fa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c0190610876908490879091825263ffffffff16602082015260400190565b60405180910390a2505050565b6000805a90503330146108d85760405162461bcd60e51b815260206004820152601760248201527f4141393220696e7465726e616c2063616c6c206f6e6c7900000000000000000060448201526064016105c5565b8451604081015160608201518101611388015a101561091b577fdeaddead0000000000000000000000000000000000000000000000000000000060005260206000fd5b600088156109f25760008084600001516001600160a01b0316848d8d60405161094592919061346a565b60006040518083038160008787f1925050503d8060008114610983576040519150601f19603f3d011682016040523d82523d6000602084013e610988565b606091505b5091509150816109ef578051156109ea5784600001516001600160a01b03168a602001517f1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a2018760200151846040516109e19291906134d2565b60405180910390a35b600192505b50505b600088608001515a8603019050610a446000838b8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250611a97915050565b955050505050505b95945050505050565b8160008167ffffffffffffffff811115610a7157610a716130b1565b604051908082528060200260200182016040528015610aaa57816020015b610a97612fb8565b815260200190600190039081610a8f5790505b50905060005b82811015610b25576000828281518110610acc57610acc6134eb565b60200260200101519050600080610b09848a8a87818110610aef57610aef6134eb565b9050602002810190610b01919061351a565b856000611dc9565b5091509150610b1a84848484611f66565b505050600101610ab0565b506000805b83811015610b8557610b7981888884818110610b4857610b486134eb565b9050602002810190610b5a919061351a565b858481518110610b6c57610b6c6134eb565b6020026020010151612138565b90910190600101610b2a565b50610b90848261229a565b505050505050565b33600090815260208190526040902080546dffffffffffffffffffffffffffff16821115610c085760405162461bcd60e51b815260206004820152601960248201527f576974686472617720616d6f756e7420746f6f206c617267650000000000000060448201526064016105c5565b8054610c259083906dffffffffffffffffffffffffffff16613558565b81547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff91909116178155604080516001600160a01b03851681526020810184905233917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb910160405180910390a26000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610cf0576040519150601f19603f3d011682016040523d82523d6000602084013e610cf5565b606091505b5050905080610d465760405162461bcd60e51b815260206004820152601260248201527f6661696c656420746f207769746864726177000000000000000000000000000060448201526064016105c5565b50505050565b816000805b82811015610da657858582818110610d6b57610d6b6134eb565b9050602002810190610d7d919061356f565b610d8790806135a3565b610d92915083613452565b915080610d9e8161360b565b915050610d51565b5060008167ffffffffffffffff811115610dc257610dc26130b1565b604051908082528060200260200182016040528015610dfb57816020015b610de8612fb8565b815260200190600190039081610de05790505b5090506000805b84811015610fb65736888883818110610e1d57610e1d6134eb565b9050602002810190610e2f919061356f565b9050366000610e3e83806135a3565b90925090506000610e556040850160208601613388565b90508160005b81811015610ee7576000898981518110610e7757610e776134eb565b60200260200101519050600080610eb38b898987818110610e9a57610e9a6134eb565b9050602002810190610eac919061351a565b8589611dc9565b5091509150610ec484848484611f66565b8a610ece8161360b565b9b50505050508080610edf9061360b565b915050610e5b565b506001600160a01b03821615610f9e576001600160a01b03821663e3563a4f8585610f1560408a018a613644565b6040518563ffffffff1660e01b8152600401610f34949392919061382f565b60006040518083038186803b158015610f4c57600080fd5b505afa925050508015610f5d575060015b610f9e576040517f86a9f7500000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016105c5565b50505050508080610fae9061360b565b915050610e02565b50600080915060005b858110156110d65736898983818110610fda57610fda6134eb565b9050602002810190610fec919061356f565b90507f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d61101f6040830160208401613388565b6040516001600160a01b03909116815260200160405180910390a136600061104783806135a3565b90925090508060005b818110156110be576110928885858481811061106e5761106e6134eb565b9050602002810190611080919061351a565b8b8b81518110610b6c57610b6c6134eb565b61109c9088613452565b9650876110a88161360b565b98505080806110b69061360b565b915050611050565b505050505080806110ce9061360b565b915050610fbf565b50604051600081527f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d9060200160405180910390a1611115868261229a565b5050505050505050565b6040517f570e1a360000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063570e1a369061118690859085906004016138e6565b6020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c991906138fa565b6040517f6ca7b8060000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016105c5565b600061121282612398565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b336000908152602081905260409020600181015463ffffffff166112af5760405162461bcd60e51b815260206004820152600a60248201527f6e6f74207374616b65640000000000000000000000000000000000000000000060448201526064016105c5565b80546e010000000000000000000000000000900460ff166113125760405162461bcd60e51b815260206004820152601160248201527f616c726561647920756e7374616b696e6700000000000000000000000000000060448201526064016105c5565b600181015460009061132a9063ffffffff1642613917565b6001830180547fffffffffffffffffffffffffffffffffffffffff0000000000000000ffffffff1664010000000067ffffffffffffffff84169081029190911790915583547fffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffff16845560405190815290915033907ffa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a9060200161055b565b6113d0612fb8565b6000806113e1600085856001611dc9565b50915091506000806113f384846123b1565b925092505061140143600052565b600061140f60008888612138565b60808701516040517fcd8ac24600000000000000000000000000000000000000000000000000000000815260048101919091526024810182905267ffffffffffffffff8086166044830152841660648201529091506084016105c5565b33600090815260208190526040902080546f0100000000000000000000000000000090046dffffffffffffffffffffffffffff16806114ed5760405162461bcd60e51b815260206004820152601460248201527f4e6f207374616b6520746f20776974686472617700000000000000000000000060448201526064016105c5565b6001820154640100000000900467ffffffffffffffff166115505760405162461bcd60e51b815260206004820152601d60248201527f6d7573742063616c6c20756e6c6f636b5374616b65282920666972737400000060448201526064016105c5565b60018201544264010000000090910467ffffffffffffffff1611156115b75760405162461bcd60e51b815260206004820152601b60248201527f5374616b65207769746864726177616c206973206e6f7420647565000000000060448201526064016105c5565b6001820180547fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016905581547fffffff0000000000000000000000000000ffffffffffffffffffffffffffffff168255604080516001600160a01b03851681526020810183905233917fb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3910160405180910390a26000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114611698576040519150601f19603f3d011682016040523d82523d6000602084013e61169d565b606091505b5050905080610d465760405162461bcd60e51b815260206004820152601860248201527f6661696c656420746f207769746864726177207374616b65000000000000000060448201526064016105c5565b6116f6612fb8565b6000806000611709600086866001611dc9565b865160a00151604080518082018252600080825260208083018281526001600160a01b03958616835282825284832080546dffffffffffffffffffffffffffff6f01000000000000000000000000000000918290048116875260019283015463ffffffff9081169094528f51518851808a018a5287815280870188815291909a168752868652888720805493909304909116895291015490911690528351808501909452818452830152949750929550909350903660006117cd60408b018b613644565b9092509050600060148210156117e45760006117ff565b6117f2601460008486613943565b6117fb9161396d565b60601c5b604080518082018252600080825260208083018281526001600160a01b03861683529082905292902080546f0100000000000000000000000000000090046dffffffffffffffffffffffffffff1682526001015463ffffffff169091529091509350505050600080600061187389896123b1565b92509250925060006040518060c001604052808c6080015181526020018c60400151815260200185151581526020018467ffffffffffffffff1681526020018367ffffffffffffffff1681526020016118cd8d6060015190565b905290506001600160a01b03881615611987576040805180820182526001600160a01b038a1680825282518084018452600080825260208083018281529382528181529085902080546f0100000000000000000000000000000090046dffffffffffffffffffffffffffff1683526001015463ffffffff169092529082015290517f356877a30000000000000000000000000000000000000000000000000000000081526105c5908390899089908c908690600401613a0e565b808686896040517ff04297e90000000000000000000000000000000000000000000000000000000081526004016105c59493929190613a8e565b6001600160a01b038216600090815260208190526040812080549091906119f99084906dffffffffffffffffffffffffffff16613452565b90506dffffffffffffffffffffffffffff811115611a595760405162461bcd60e51b815260206004820152601060248201527f6465706f736974206f766572666c6f770000000000000000000000000000000060448201526064016105c5565b81547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff919091161790555050565b6000805a855190915060009081611aad8261242e565b60a08301519091506001600160a01b038116611acc5782519350611ca1565b809350600088511115611ca157868202955060028a6002811115611af257611af2613ae1565b14611b7d5760608301516040517fa9a234090000000000000000000000000000000000000000000000000000000081526001600160a01b0383169163a9a2340991611b45908e908d908c90600401613b10565b600060405180830381600088803b158015611b5f57600080fd5b5087f1158015611b73573d6000803e3d6000fd5b5050505050611ca1565b60608301516040517fa9a234090000000000000000000000000000000000000000000000000000000081526001600160a01b0383169163a9a2340991611bcb908e908d908c90600401613b10565b600060405180830381600088803b158015611be557600080fd5b5087f193505050508015611bf7575060015b611ca157611c03613b70565b806308c379a01415611c415750611c18613b8c565b80611c235750611c43565b8b828260405162fa072b60e01b81526004016105c593929190613c34565b505b60405162fa072b60e01b8152600481018c90526001600160a01b038216602482015260606044820152601160648201527f41353020706f73744f7020726576657274000000000000000000000000000000608482015260a4016105c5565b5a85038701965081870295508589604001511015611d175760405162fa072b60e01b8152600481018c90526001600160a01b038216602482015260606044820152601f60648201527f4135312070726566756e642062656c6f772061637475616c476173436f737400608482015260a4016105c5565b6040890151869003611d2985826119c1565b6000808c6002811115611d3e57611d3e613ae1565b1490508460a001516001600160a01b031685600001516001600160a01b03168c602001517f49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f8860200151858d8f604051611db1949392919093845291151560208401526040830152606082015260800190565b60405180910390a45050505050505095945050505050565b6000806000805a8651909150611ddf888261245f565b611de888611207565b6020880152604081015160608201516080830151171760e089013517610100890135176effffffffffffffffffffffffffffff811115611e6a5760405162461bcd60e51b815260206004820152601860248201527f41413934206761732076616c756573206f766572666c6f77000000000000000060448201526064016105c5565b600080611e7684612558565b9050611e858c8c8c8c856125a6565b995096509150611e9443600052565b60a08401516060906001600160a01b031615611ebc57611eb78d8d8d85876129a5565b985090505b60005a87039050808d60a001351015611f36578d8660a0015160405162fa072b60e01b81526004016105c59291909182526001600160a01b03166020820152606060408201819052601e908201527f41413430206f76657220766572696669636174696f6e4761734c696d69740000608082015260a00190565b60408c018390528160608d015260c08d01355a8803018c6080018181525050505050505050509450945094915050565b600080611f7284612c09565b915091508115611fd25760405162fa072b60e01b8152600481018790526000602482015260606044820152601460648201527f41413234207369676e6174757265206572726f72000000000000000000000000608482015260a4016105c5565b801561202e5760405162fa072b60e01b8152600481018790526000602482015260606044820152601760648201527f414132322065787069726564206f72206e6f7420647565000000000000000000608482015260a4016105c5565b61203783612c09565b909250905081156120a757845160a0015160405162fa072b60e01b8152600481018890526001600160a01b03909116602482015260606044820152601460648201527f41413334207369676e6174757265206572726f72000000000000000000000000608482015260a4016105c5565b8015610b9057845160a0015160405162fa072b60e01b8152600481018890526001600160a01b03909116602482015260606044820152602160648201527f41413332207061796d61737465722065787069726564206f72206e6f7420647560848201527f650000000000000000000000000000000000000000000000000000000000000060a482015260c4016105c5565b6000805a9050600061214b846060015190565b905030631d7327566121606060880188613644565b87856040518563ffffffff1660e01b81526004016121819493929190613c5c565b6020604051808303816000875af19250505080156121bc575060408051601f3d908101601f191682019092526121b991810190613d10565b60015b61228e57600060206000803e506000517fdeaddead0000000000000000000000000000000000000000000000000000000081141561225957845160a0015160405162fa072b60e01b8152600481018990526001600160a01b03909116602482015260606044820152600f60648201527f41413935206f7574206f66206761730000000000000000000000000000000000608482015260a4016105c5565b600085608001515a61226b9086613558565b6122759190613452565b9050612285886002888685611a97565b94505050612291565b92505b50509392505050565b6001600160a01b0382166122f05760405162461bcd60e51b815260206004820152601860248201527f4141393020696e76616c69642062656e6566696369617279000000000000000060448201526064016105c5565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461233d576040519150601f19603f3d011682016040523d82523d6000602084013e612342565b606091505b50509050806123935760405162461bcd60e51b815260206004820152601f60248201527f41413931206661696c65642073656e6420746f2062656e65666963696172790060448201526064016105c5565b505050565b60006123a382612c52565b805190602001209050919050565b60008060006123bf85612c91565b91945092509050600080806123d387612c91565b92509250925085806123e25750825b95508167ffffffffffffffff168567ffffffffffffffff161015612404578194505b8067ffffffffffffffff168467ffffffffffffffff161115612424578093505b5050509250925092565b60c081015160e0820151600091908082141561244b575092915050565b61245782488301612cb7565b949350505050565b61246c6020830183613388565b6001600160a01b0316815260208083013590820152608080830135604083015260a0830135606083015260c0808401359183019190915260e08084013591830191909152610100830135908201523660006124cb610120850185613644565b9092509050801561254b5760148110156125275760405162461bcd60e51b815260206004820152601d60248201527f4141393320696e76616c6964207061796d6173746572416e644461746100000060448201526064016105c5565b612535601460008385613943565b61253e9161396d565b60601c60a0840152610d46565b600060a084015250505050565b60a081015160009081906001600160a01b0316612576576001612579565b60035b60ff169050600083608001518285606001510285604001510101905061259e8461242e565b029392505050565b6000806000805a87518051919250906125cc8b8a6125c760408e018e613644565b612ccf565b6001600160a01b0388166001141561273f576125e743600052565b6001600160a01b0381163b61264c5760405162fa072b60e01b8152600060048201819052602482015260606044820152601960648201527f41413230206163636f756e74206e6f74206465706c6f79656400000000000000608482015260a4016105c5565b60a08201516001600160a01b031615801590612674575060a08201516001600160a01b03163b155b156126cf5760405162fa072b60e01b8152600060048201819052602482015260606044820152601b60648201527f41413330207061796d6173746572206e6f74206465706c6f7965640000000000608482015260a4016105c5565b806001600160a01b0316633ad59dbc6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612729575060408051601f3d908101601f19168201909252612726918101906138fa565b60015b612739576000945084975061273f565b97508794505b60a08201516000906001600160a01b038116612794576001600160a01b0383166000908152602081905260409020546dffffffffffffffffffffffffffff1689811161278d57808a03612790565b60005b9250505b826001600160a01b0316630825d1fc85606001518e8e602001518e876040518663ffffffff1660e01b81526004016127cf9493929190613d29565b60206040518083038160008887f19350505050801561280b575060408051601f3d908101601f1916820190925261280891810190613d10565b60015b6128ae57612817613b70565b806308c379a01415612856575061282c613b8c565b806128375750612858565b8d60008260405162fa072b60e01b81526004016105c593929190613c34565b505b60405162fa072b60e01b8152600481018e90526000602482015260606044820152601660648201527f4141323320726576657274656420286f72204f4f472900000000000000000000608482015260a4016105c5565b95506001600160a01b038116612990576001600160a01b038316600090815260208190526040902080546dffffffffffffffffffffffffffff16808b1115612954578e600060405162fa072b60e01b81526004016105c59291909182526001600160a01b031660208201526060604082018190526017908201527f41413231206469646e2774207061792070726566756e64000000000000000000608082015260a00190565b81547fffffffffffffffffffffffffffffffffffff000000000000000000000000000016908b90036dffffffffffffffffffffffffffff161790555b5a850397505050505050955095509592505050565b82516060818101519091600091848111612a015760405162461bcd60e51b815260206004820152601f60248201527f4141343120746f6f206c6974746c6520766572696669636174696f6e4761730060448201526064016105c5565b60a08201516001600160a01b038116600090815260208190526040902080548784039291906dffffffffffffffffffffffffffff1689811015612a9c5760405162fa072b60e01b8152600481018e90526001600160a01b038416602482015260606044820152601e60648201527f41413331207061796d6173746572206465706f73697420746f6f206c6f770000608482015260a4016105c5565b8981038260000160006101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550826001600160a01b031663f465c77e858e8e602001518e6040518563ffffffff1660e01b8152600401612b0a93929190613d61565b60006040518083038160008887f193505050508015612b4b57506040513d6000823e601f3d908101601f19168201604052612b489190810190613d86565b60015b612bf557612b57613b70565b806308c379a01415612b955750612b6c613b8c565b80612b775750612b97565b8d848260405162fa072b60e01b81526004016105c593929190613c34565b505b60405162fa072b60e01b8152600481018e90526001600160a01b038416602482015260606044820152601660648201527f4141333320726576657274656420286f72204f4f472900000000000000000000608482015260a4016105c5565b909e909d509b505050505050505050505050565b60008082612c1c57506000928392509050565b600080612c2885612c91565b91955067ffffffffffffffff908116935016905042811080612c4957508142105b92505050915091565b6060366000612c65610140850185613644565b915091508360208184030360405194506020810185016040528085528082602087013750505050919050565b60ff81161515600080612ca96001600886901c613e28565b929460489490941c93915050565b6000818310612cc65781612cc8565b825b9392505050565b8015610d46578251516001600160a01b0381163b15612d3e5760405162fa072b60e01b8152600481018690526000602482015260606044820152601f60648201527f414131302073656e64657220616c726561647920636f6e737472756374656400608482015260a4016105c5565b8351606001516040517f570e1a360000000000000000000000000000000000000000000000000000000081526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163570e1a369190612daf90889088906004016138e6565b60206040518083038160008887f1158015612dce573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612df391906138fa565b90506001600160a01b038116612e595760405162fa072b60e01b8152600481018790526000602482015260606044820152601b60648201527f4141313320696e6974436f6465206661696c6564206f72204f4f470000000000608482015260a4016105c5565b816001600160a01b0316816001600160a01b031614612ec85760405162fa072b60e01b8152600481018790526000602482015260606044820152602060648201527f4141313420696e6974436f6465206d7573742072657475726e2073656e646572608482015260a4016105c5565b6001600160a01b0381163b612f2d5760405162fa072b60e01b8152600481018790526000602482015260606044820152602060648201527f4141313520696e6974436f6465206d757374206372656174652073656e646572608482015260a4016105c5565b6000612f3c6014828688613943565b612f459161396d565b60601c9050826001600160a01b031686602001517fd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d83896000015160a00151604051612fa79291906001600160a01b0392831681529116602082015260400190565b60405180910390a350505050505050565b6040518060a0016040528061301d60405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b8152602001600080191681526020016000815260200160008152602001600081525090565b60006020828403121561305457600080fd5b813563ffffffff81168114612cc857600080fd5b60008083601f84011261307a57600080fd5b50813567ffffffffffffffff81111561309257600080fd5b6020830191508360208285010111156130aa57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810181811067ffffffffffffffff82111715613100576131006130b1565b60405250565b610100810181811067ffffffffffffffff82111715613100576131006130b1565b601f19601f830116810181811067ffffffffffffffff8211171561314d5761314d6130b1565b6040525050565b6001600160a01b038116811461316957600080fd5b50565b803561317781613154565b919050565b60008060008060008587036101c081121561319657600080fd5b863567ffffffffffffffff808211156131ae57600080fd5b6131ba8a838b01613068565b9098509650601f1992909201916101809150818312156131d957600080fd5b6040516131e5816130e0565b610100808512156131f557600080fd5b604051945061320385613106565b61320f60208c0161316c565b855260408b0135602086015260608b0135604086015260808b0135606086015260a08b0135608086015261324560c08c0161316c565b60a086015260e08b81013560c0870152908b0135908501529283526101208901356020840152610140890135604084015261016089013560608401528189013560808401529194506101a088013591808311156132a157600080fd5b50506132af88828901613068565b969995985093965092949392505050565b60008083601f8401126132d257600080fd5b50813567ffffffffffffffff8111156132ea57600080fd5b6020830191508360208260051b85010111156130aa57600080fd5b60008060006040848603121561331a57600080fd5b833567ffffffffffffffff81111561333157600080fd5b61333d868287016132c0565b909450925050602084013561335181613154565b809150509250925092565b6000806040838503121561336f57600080fd5b823561337a81613154565b946020939093013593505050565b60006020828403121561339a57600080fd5b8135612cc881613154565b600080602083850312156133b857600080fd5b823567ffffffffffffffff8111156133cf57600080fd5b6133db85828601613068565b90969095509350505050565b6000602082840312156133f957600080fd5b813567ffffffffffffffff81111561341057600080fd5b82016101608185031215612cc857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561346557613465613423565b500190565b8183823760009101908152919050565b60005b8381101561349557818101518382015260200161347d565b83811115610d465750506000910152565b600081518084526134be81602086016020860161347a565b601f01601f19169290920160200192915050565b82815260406020820152600061245760408301846134a6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea183360301811261354e57600080fd5b9190910192915050565b60008282101561356a5761356a613423565b500390565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261354e57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126135d857600080fd5b83018035915067ffffffffffffffff8211156135f357600080fd5b6020019150600581901b36038213156130aa57600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561363d5761363d613423565b5060010190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261367957600080fd5b83018035915067ffffffffffffffff82111561369457600080fd5b6020019150368190038213156130aa57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126136de57600080fd5b830160208101925035905067ffffffffffffffff8111156136fe57600080fd5b8036038313156130aa57600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006101606137578461374a8561316c565b6001600160a01b03169052565b6020830135602085015261376e60408401846136a9565b826040870152613781838701828461370d565b9250505061379260608401846136a9565b85830360608701526137a583828461370d565b925050506080830135608085015260a083013560a085015260c083013560c085015260e083013560e08501526101008084013581860152506101206137ec818501856136a9565b868403838801526137fe84828461370d565b9350505050610140613812818501856136a9565b8684038388015261382484828461370d565b979650505050505050565b6040808252810184905260006060600586901b830181019083018783805b898110156138cf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa087860301845282357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea18c36030181126138ad578283fd5b6138b9868d8301613738565b955050602093840193929092019160010161384d565b50505050828103602084015261382481858761370d565b60208152600061245760208301848661370d565b60006020828403121561390c57600080fd5b8151612cc881613154565b600067ffffffffffffffff80831681851680830382111561393a5761393a613423565b01949350505050565b6000808585111561395357600080fd5b8386111561396057600080fd5b5050820193919092039150565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156139ad5780818660140360031b1b83161692505b505092915050565b80518252602081015160208301526040810151151560408301526000606082015167ffffffffffffffff8082166060860152806080850151166080860152505060a082015160c060a085015261245760c08501826134a6565b6000610140808352613a22818401896139b5565b915050613a3c602083018780518252602090810151910152565b845160608301526020948501516080830152835160a08301529284015160c082015281516001600160a01b031660e0820152908301518051610100830152909201516101209092019190915292915050565b60e081526000613aa160e08301876139b5565b9050613aba602083018680518252602090810151910152565b8351606083015260208401516080830152825160a0830152602083015160c0830152610a4c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060038510613b49577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b84825260606020830152613b6060608301856134a6565b9050826040830152949350505050565b600060033d1115613b895760046000803e5060005160e01c5b90565b600060443d1015613b9a5790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715613be857505050505090565b8285019150815181811115613c005750505050505090565b843d8701016020828501011115613c1a5750505050505090565b613c2960208286010187613127565b509095945050505050565b8381526001600160a01b0383166020820152606060408201526000610a4c60608301846134a6565b60006101c0808352613c71818401878961370d565b905084516001600160a01b03808251166020860152602082015160408601526040820151606086015260608201516080860152608082015160a08601528060a08301511660c08601525060c081015160e085015260e08101516101008501525060208501516101208401526040850151610140840152606085015161016084015260808501516101808401528281036101a084015261382481856134a6565b600060208284031215613d2257600080fd5b5051919050565b608081526000613d3c6080830187613738565b6020830195909552506001600160a01b03929092166040830152606090910152919050565b606081526000613d746060830186613738565b60208301949094525060400152919050565b60008060408385031215613d9957600080fd5b825167ffffffffffffffff80821115613db157600080fd5b818501915085601f830112613dc557600080fd5b815181811115613dd757613dd76130b1565b6040519150613df06020601f19601f8401160183613127565b808252866020828501011115613e0557600080fd5b613e1681602084016020860161347a565b50602094909401519395939450505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615613e6257613e62613423565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615613e9657613e96613423565b5050039056fea2646970667358221220c2416c4f4cc85d128ec61d60b94a953e0ef3b9707bd65c2eb763c9132e08ed4964736f6c634300080c0033",
  "devdoc": {
    "errors": {
      "FailedOp(uint256,address,string)": [
        {
          "params": {
            "opIndex": "- index into the array of ops to the failed one (in simulateValidation, this is always zero)",
            "paymaster": "- if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,       this value will be zero (since it failed before accessing the paymaster)",
            "reason": "- revert reason   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of account/paymaster reverts."
          }
        }
      ],
      "ValidationResult((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))": [
        {
          "params": {
            "factoryInfo": "stake information about the factor (if any)",
            "paymasterInfo": "stake information about the paymaster (if any)",
            "returnInfo": "gas and time-range returned values",
            "senderInfo": "stake information about the sender"
          }
        }
      ],
      "ValidationResultWithAggregation((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))": [
        {
          "params": {
            "aggregatorInfo": "signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation",
            "factoryInfo": "stake information about the factor (if any)",
            "paymasterInfo": "stake information about the paymaster (if any)",
            "returnInfo": "gas and time-range returned values",
            "senderInfo": "stake information about the sender"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addStake(uint32)": {
        "params": {
          "_unstakeDelaySec": "the new lock duration before the deposit can be withdrawn."
        }
      },
      "getSenderAddress(bytes)": {
        "params": {
          "initCode": "the constructor code to be passed into the UserOperation."
        }
      },
      "handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": {
        "params": {
          "beneficiary": "the address to receive the fees",
          "opsPerAggregator": "the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)"
        }
      },
      "handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": {
        "params": {
          "beneficiary": "the address to receive the fees",
          "ops": "the operations to execute"
        }
      },
      "simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
        "details": "this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.",
        "params": {
          "userOp": "the user operation to validate."
        }
      },
      "withdrawStake(address)": {
        "params": {
          "withdrawAddress": "the address to send withdrawn value."
        }
      },
      "withdrawTo(address,uint256)": {
        "params": {
          "withdrawAddress": "the address to send withdrawn value.",
          "withdrawAmount": "the amount to withdraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FailedOp(uint256,address,string)": [
        {
          "notice": "a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it."
        }
      ],
      "SenderAddressResult(address)": [
        {
          "notice": "return value of getSenderAddress"
        }
      ],
      "SignatureValidationFailed(address)": [
        {
          "notice": "error case when a signature aggregator fails to verify the aggregated signature it had created."
        }
      ],
      "ValidationResult((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))": [
        {
          "notice": "Successful result from simulateValidation."
        }
      ],
      "ValidationResultWithAggregation((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))": [
        {
          "notice": "Successful result from simulateValidation, if the account returns a signature aggregator"
        }
      ]
    },
    "events": {
      "AccountDeployed(bytes32,address,address,address)": {
        "notice": "account \"sender\" was deployed."
      },
      "SignatureAggregatorChanged(address)": {
        "notice": "signature aggregator used by the following UserOperationEvents within this bundle."
      },
      "StakeLocked(address,uint256,uint256)": {
        "notice": "Emitted once a stake is scheduled for withdrawal"
      },
      "StakeUnlocked(address,uint256)": {
        "notice": "Emitted once a stake is scheduled for withdrawal"
      },
      "UserOperationRevertReason(bytes32,address,uint256,bytes)": {
        "notice": "An event emitted if the UserOperation \"callData\" reverted with non-zero length"
      }
    },
    "kind": "user",
    "methods": {
      "SIG_VALIDATION_FAILED()": {
        "notice": "for simulation purposes, validateUserOp (and validatePaymasterUserOp) must return this value in case of signature failure, instead of revert."
      },
      "addStake(uint32)": {
        "notice": "add to the account's stake - amount and delay any pending unstake is first cancelled."
      },
      "balanceOf(address)": {
        "notice": "return the deposit (for gas payment) of the account"
      },
      "depositTo(address)": {
        "notice": "add to the deposit of the given account"
      },
      "deposits(address)": {
        "notice": "maps paymaster to their deposits and stakes"
      },
      "getSenderAddress(bytes)": {
        "notice": "Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error"
      },
      "getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
        "notice": "generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."
      },
      "handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": {
        "notice": "Execute a batch of UserOperation with Aggregators"
      },
      "handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": {
        "notice": "Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an \"actualAggregator\" when performing simulateValidation), then handleAggregatedOps() must be used instead."
      },
      "innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)": {
        "notice": "inner function to handle a UserOperation. Must be declared \"external\" to open a call context, but it can only be called by handleOps."
      },
      "simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
        "notice": "simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \"ExecutionResult\". it performs full validation of the UserOperation, but ignores signature error. Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events."
      },
      "simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
        "notice": "Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp."
      },
      "unlockStake()": {
        "notice": "attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."
      },
      "withdrawStake(address)": {
        "notice": "withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"
      },
      "withdrawTo(address,uint256)": {
        "notice": "withdraw from the deposit."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6612,
        "contract": "contracts/core/EntryPoint.sol:EntryPoint",
        "label": "deposits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(DepositInfo)7383_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(DepositInfo)7383_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakeManager.DepositInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositInfo)7383_storage"
      },
      "t_struct(DepositInfo)7383_storage": {
        "encoding": "inplace",
        "label": "struct IStakeManager.DepositInfo",
        "members": [
          {
            "astId": 7374,
            "contract": "contracts/core/EntryPoint.sol:EntryPoint",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 7376,
            "contract": "contracts/core/EntryPoint.sol:EntryPoint",
            "label": "staked",
            "offset": 14,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7378,
            "contract": "contracts/core/EntryPoint.sol:EntryPoint",
            "label": "stake",
            "offset": 15,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 7380,
            "contract": "contracts/core/EntryPoint.sol:EntryPoint",
            "label": "unstakeDelaySec",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 7382,
            "contract": "contracts/core/EntryPoint.sol:EntryPoint",
            "label": "withdrawTime",
            "offset": 4,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}